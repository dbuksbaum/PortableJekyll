var search_data = {"index":{"searchIndex":["kernel","littleplugger","classmethods","littleplugger()","disregard_plugin()","disregard_plugins()","initialize_plugins()","load_plugins()","plugin()","plugin_module()","plugin_names()","plugin_path()","plugins()","version()","history","readme"],"longSearchIndex":["kernel","littleplugger","littleplugger::classmethods","kernel#littleplugger()","littleplugger::classmethods#disregard_plugin()","littleplugger::classmethods#disregard_plugins()","littleplugger::classmethods#initialize_plugins()","littleplugger::classmethods#load_plugins()","littleplugger::classmethods#plugin()","littleplugger::classmethods#plugin_module()","littleplugger::classmethods#plugin_names()","littleplugger::classmethods#plugin_path()","littleplugger::classmethods#plugins()","littleplugger::version()","",""],"info":[["Kernel","","Kernel.html","",""],["LittlePlugger","","LittlePlugger.html","","<p>Synopsis\n<p>LittlePlugger is a module that provides Gem based plugin management. By\nextending your own class …\n"],["LittlePlugger::ClassMethods","","LittlePlugger/ClassMethods.html","",""],["LittlePlugger","Kernel","Kernel.html#method-i-LittlePlugger","( opts = {} )","<p>This method allows the user to override some of LittlePlugger&#39;s default\nsettings when mixed into …\n"],["disregard_plugin","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-disregard_plugin","( *names )","<p>Add the <em>names</em> to the list of plugins that will\n<strong>not</strong> be loaded. This list prevents the plugin system from …\n"],["disregard_plugins","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-disregard_plugins","( *names )",""],["initialize_plugins","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-initialize_plugins","()","<p>Iterate over the loaded plugin classes and modules and call the initialize\nmethod for each plugin. The …\n"],["load_plugins","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-load_plugins","()","<p>Iterate through all installed gems looking for those that have the\n<code>plugin_path</code> in their “lib” …\n"],["plugin","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-plugin","( *names )","<p>Add the <em>names</em> to the list of plugins that will be loaded.\n"],["plugin_module","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-plugin_module","()","<p>This module or class where plugins are located.\n"],["plugin_names","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-plugin_names","()","<p>Returns the array of plugin names that will be loaded. If the array is\nempty, then any plugin found in …\n"],["plugin_path","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-plugin_path","()","<p>The path to search in a gem&#39;s &#39;lib&#39; folder for plugins.\n"],["plugins","LittlePlugger::ClassMethods","LittlePlugger/ClassMethods.html#method-i-plugins","()","<p>Loads the desired plugins and returns a hash. The hash contains all the\nplugin classes and modules keyed …\n"],["version","LittlePlugger","LittlePlugger.html#method-c-version","()","<p>Returns the version string for the library.\n"],["History","","History_txt.html","","<p>1.1.3 / 2011-11-17\n<p>1 bug fix\n<p>Ensuring gem files are in a sorted order\n"],["README","","README_rdoc.html","","<p>Little Plugger\n<p>by Tim Pease\n<p>github.com/TwP/little-plugger/tree/master\n"]]}}