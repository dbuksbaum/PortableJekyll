var search_data = {"index":{"searchIndex":["minimagick","configuration","error","image","info","invalid","logger","shell","tool","animate","compare","composite","conjure","convert","display","identify","import","mogrify","montage","optionmethods","stream","utilities","version","+()","<<()","==()","[]()","[]()","attribute()","benchmark()","call()","cheap_info()","clear()","cli=()","cli_options()","cli_version()","collapse!()","colorspace()","colorspace()","combine_options()","command()","composite()","configure()","create()","creation_operator()","creation_operators()","debug()","decode_comma_separated_ascii_characters()","destroy!()","details()","details()","dimensions()","eql?()","executable()","execute()","execute_open3()","execute_posix_spawn()","exif()","extended()","format()","frames()","graphicsmagick?()","hash()","identify()","identify()","imagemagick?()","import_pixels()","info()","inherited()","instances()","layer?()","layers()","merge!()","method_missing()","mime_type()","mogrify()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open()","option()","output()","pages()","processor=()","raw()","raw_exif()","read()","reload_methods()","reload_tools()","resolution()","resolution()","respond_to_missing?()","run()","run_command()","signature()","stack()","tempfile()","to_blob()","to_s()","type()","valid?()","validate!()","version()","which()","width()","with_cli()","write()"],"longSearchIndex":["minimagick","minimagick::configuration","minimagick::error","minimagick::image","minimagick::image::info","minimagick::invalid","minimagick::logger","minimagick::shell","minimagick::tool","minimagick::tool::animate","minimagick::tool::compare","minimagick::tool::composite","minimagick::tool::conjure","minimagick::tool::convert","minimagick::tool::display","minimagick::tool::identify","minimagick::tool::import","minimagick::tool::mogrify","minimagick::tool::montage","minimagick::tool::optionmethods","minimagick::tool::stream","minimagick::utilities","minimagick::version","minimagick::tool#+()","minimagick::tool#<<()","minimagick::image#==()","minimagick::image#[]()","minimagick::image::info#[]()","minimagick::image::attribute()","minimagick::logger#benchmark()","minimagick::tool#call()","minimagick::image::info#cheap_info()","minimagick::image::info#clear()","minimagick::configuration#cli=()","minimagick::tool::optionmethods#cli_options()","minimagick::cli_version()","minimagick::image#collapse!()","minimagick::image#colorspace()","minimagick::image::info#colorspace()","minimagick::image#combine_options()","minimagick::tool#command()","minimagick::image#composite()","minimagick::configuration#configure()","minimagick::image::create()","minimagick::tool::optionmethods#creation_operator()","minimagick::tool::optionmethods#creation_operators()","minimagick::logger#debug()","minimagick::image::info#decode_comma_separated_ascii_characters()","minimagick::image#destroy!()","minimagick::image#details()","minimagick::image::info#details()","minimagick::image#dimensions()","minimagick::image#eql?()","minimagick::tool#executable()","minimagick::shell#execute()","minimagick::shell#execute_open3()","minimagick::shell#execute_posix_spawn()","minimagick::image::info#exif()","minimagick::configuration::extended()","minimagick::image#format()","minimagick::image#frames()","minimagick::graphicsmagick?()","minimagick::image#hash()","minimagick::image#identify()","minimagick::image::info#identify()","minimagick::imagemagick?()","minimagick::image::import_pixels()","minimagick::image#info()","minimagick::tool::inherited()","minimagick::tool::optionmethods::instances()","minimagick::image#layer?()","minimagick::image#layers()","minimagick::tool#merge!()","minimagick::image#method_missing()","minimagick::image::info#mime_type()","minimagick::image#mogrify()","minimagick::image::new()","minimagick::image::info::new()","minimagick::logger::new()","minimagick::shell::new()","minimagick::tool::new()","minimagick::tool::new()","minimagick::tool::animate::new()","minimagick::tool::compare::new()","minimagick::tool::composite::new()","minimagick::tool::conjure::new()","minimagick::tool::convert::new()","minimagick::tool::display::new()","minimagick::tool::identify::new()","minimagick::tool::import::new()","minimagick::tool::mogrify::new()","minimagick::tool::montage::new()","minimagick::tool::optionmethods::new()","minimagick::tool::stream::new()","minimagick::image::open()","minimagick::tool::optionmethods#option()","minimagick::logger#output()","minimagick::image#pages()","minimagick::configuration#processor=()","minimagick::image::info#raw()","minimagick::image::info#raw_exif()","minimagick::image::read()","minimagick::tool::optionmethods#reload_methods()","minimagick::configuration#reload_tools()","minimagick::image#resolution()","minimagick::image::info#resolution()","minimagick::image#respond_to_missing?()","minimagick::shell#run()","minimagick::image#run_command()","minimagick::image::info#signature()","minimagick::tool#stack()","minimagick::utilities#tempfile()","minimagick::image#to_blob()","minimagick::tool::optionmethods#to_s()","minimagick::image#type()","minimagick::image#valid?()","minimagick::image#validate!()","minimagick::version()","minimagick::utilities#which()","minimagick::image#width()","minimagick::with_cli()","minimagick::image#write()"],"info":[["MiniMagick","","MiniMagick.html","",""],["MiniMagick::Configuration","","MiniMagick/Configuration.html","",""],["MiniMagick::Error","","MiniMagick/Error.html","",""],["MiniMagick::Image","","MiniMagick/Image.html","",""],["MiniMagick::Image::Info","","MiniMagick/Image/Info.html","","<p>@private\n"],["MiniMagick::Invalid","","MiniMagick/Invalid.html","",""],["MiniMagick::Logger","","MiniMagick/Logger.html","","<p>Responsible for logging commands to stdout (activated when\n`MiniMagick.debug` is set to `true`). Implements …\n"],["MiniMagick::Shell","","MiniMagick/Shell.html","","<p>Sends commands to the shell (more precisely, it sends commands directly to\nthe operating system).\n<p>@private …\n"],["MiniMagick::Tool","","MiniMagick/Tool.html","","<p>Abstract class that wraps command-line tools. It shouldn&#39;t be used\ndirectly, but through one of its …\n"],["MiniMagick::Tool::Animate","","MiniMagick/Tool/Animate.html","","<p>@see www.imagemagick.org/script/animate.php\n"],["MiniMagick::Tool::Compare","","MiniMagick/Tool/Compare.html","","<p>@see www.imagemagick.org/script/compare.php\n"],["MiniMagick::Tool::Composite","","MiniMagick/Tool/Composite.html","","<p>@see www.imagemagick.org/script/composite.php\n"],["MiniMagick::Tool::Conjure","","MiniMagick/Tool/Conjure.html","","<p>@see www.imagemagick.org/script/conjure.php\n"],["MiniMagick::Tool::Convert","","MiniMagick/Tool/Convert.html","","<p>@see www.imagemagick.org/script/convert.php\n"],["MiniMagick::Tool::Display","","MiniMagick/Tool/Display.html","","<p>@see www.imagemagick.org/script/display.php\n"],["MiniMagick::Tool::Identify","","MiniMagick/Tool/Identify.html","","<p>@see www.imagemagick.org/script/identify.php\n"],["MiniMagick::Tool::Import","","MiniMagick/Tool/Import.html","","<p>@see www.imagemagick.org/script/import.php\n"],["MiniMagick::Tool::Mogrify","","MiniMagick/Tool/Mogrify.html","","<p>@see www.imagemagick.org/script/mogrify.php\n"],["MiniMagick::Tool::Montage","","MiniMagick/Tool/Montage.html","","<p>@see www.imagemagick.org/script/montage.php\n"],["MiniMagick::Tool::OptionMethods","","MiniMagick/Tool/OptionMethods.html","","<p>Dynamically generates modules with dynamically generated option methods for\neach command-line tool.  …\n"],["MiniMagick::Tool::Stream","","MiniMagick/Tool/Stream.html","","<p>@see www.imagemagick.org/script/stream.php\n"],["MiniMagick::Utilities","","MiniMagick/Utilities.html","","<p>@private\n"],["MiniMagick::VERSION","","MiniMagick/VERSION.html","",""],["+","MiniMagick::Tool","MiniMagick/Tool.html#method-i-2B","(*values)","<p>Changes the last operator to its “plus” form.\n<p>@example\n\n<pre>MiniMagick::Tool::Mogrify.new do |mogrify| ...</pre>\n"],["<<","MiniMagick::Tool","MiniMagick/Tool.html#method-i-3C-3C","(arg)","<p>Appends raw options, useful for appending image paths.\n<p>@return [self]\n"],["==","MiniMagick::Image","MiniMagick/Image.html#method-i-3D-3D","(other)",""],["[]","MiniMagick::Image","MiniMagick/Image.html#method-i-5B-5D","(value)","<p>Use this method if you want to access raw Identify&#39;s format API.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">image</span>[<span class=\"ruby-string\">&quot;%w %h&quot;</span>]       <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["[]","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-5B-5D","(value, *args)",""],["attribute","MiniMagick::Image","MiniMagick/Image.html#method-c-attribute","(name, key = name.to_s)","<p>@private @!macro [attach] attribute\n\n<pre>@!attribute [r] $1</pre>\n"],["benchmark","MiniMagick::Logger","MiniMagick/Logger.html#method-i-benchmark","(action)",""],["call","MiniMagick::Tool","MiniMagick/Tool.html#method-i-call","(whiny = @whiny)","<p>Executes the command that has been built up.\n<p>@example\n\n<pre>mogrify = MiniMagick::Tool::Mogrify.new\nmogrify.resize(&quot;500x500&quot;) ...</pre>\n"],["cheap_info","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-cheap_info","(value)",""],["clear","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-clear","()",""],["cli=","MiniMagick::Configuration","MiniMagick/Configuration.html#method-i-cli-3D","(value)",""],["cli_options","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-cli_options","()",""],["cli_version","MiniMagick","MiniMagick.html#method-c-cli_version","()","<p>Returns ImageMagick&#39;s/GraphicsMagick&#39;s version.\n<p>@return [String]\n"],["collapse!","MiniMagick::Image","MiniMagick/Image.html#method-i-collapse-21","(frame = 0)","<p>Collapse images with sequences to the first frame (i.e. animated gifs) and\npreserve quality.\n<p>@param frame …\n"],["colorspace","MiniMagick::Image","MiniMagick/Image.html#method-i-colorspace","","<p>@return [String]\n"],["colorspace","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-colorspace","()",""],["combine_options","MiniMagick::Image","MiniMagick/Image.html#method-i-combine_options","(&block)","<p>You can use multiple commands together using this method. Very easy to use!\n<p>@example\n\n<pre>image.combine_options ...</pre>\n"],["command","MiniMagick::Tool","MiniMagick/Tool.html#method-i-command","()","<p>The currently built-up command.\n<p>@return [Array&lt;String&gt;]\n<p>@example\n"],["composite","MiniMagick::Image","MiniMagick/Image.html#method-i-composite","(other_image, output_extension = type.downcase, mask = nil)","<p>@example\n\n<pre>first_image = MiniMagick::Image.open &quot;first.jpg&quot;\nsecond_image = MiniMagick::Image.open &quot;second.jpg&quot; ...</pre>\n"],["configure","MiniMagick::Configuration","MiniMagick/Configuration.html#method-i-configure","()","<p>@yield [self] @example\n\n<pre>MiniMagick.configure do |config|\n  config.cli = :graphicsmagick\n  config.timeout ...</pre>\n"],["create","MiniMagick::Image","MiniMagick/Image.html#method-c-create","(ext = nil, validate = MiniMagick.validate_on_create, &block)","<p>Used to create a new Image object data-copy. Not used to “paint” or that\nkind of thing.\n<p>Takes …\n"],["creation_operator","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-creation_operator","(*operators)","<p>Creates method based on creation operator&#39;s name.\n\n<pre>mogrify = MiniMagick::Tool.new(&quot;mogrify&quot;)\nmogrify.canvas(&quot;khaki&quot;) ...</pre>\n"],["creation_operators","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-creation_operators","()",""],["debug","MiniMagick::Logger","MiniMagick/Logger.html#method-i-debug","(command, &action)",""],["decode_comma_separated_ascii_characters","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-decode_comma_separated_ascii_characters","(encoded_value)",""],["destroy!","MiniMagick::Image","MiniMagick/Image.html#method-i-destroy-21","()","<p>Destroys the tempfile (created by {.open}) if it exists.\n"],["details","MiniMagick::Image","MiniMagick/Image.html#method-i-details","","<p>Returns the information from `identify -verbose` in a Hash format.\n<p>@return [Hash]\n"],["details","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-details","()",""],["dimensions","MiniMagick::Image","MiniMagick/Image.html#method-i-dimensions","","<p>@return [Array&lt;Integer&gt;]\n"],["eql?","MiniMagick::Image","MiniMagick/Image.html#method-i-eql-3F","(other)",""],["executable","MiniMagick::Tool","MiniMagick/Tool.html#method-i-executable","()","<p>The executable used for this tool. Respects {MiniMagick::Configuration#cli}\nand {MiniMagick::Configuration#cli_path}. …\n"],["execute","MiniMagick::Shell","MiniMagick/Shell.html#method-i-execute","(command)",""],["execute_open3","MiniMagick::Shell","MiniMagick/Shell.html#method-i-execute_open3","(*command)",""],["execute_posix_spawn","MiniMagick::Shell","MiniMagick/Shell.html#method-i-execute_posix_spawn","(*command)",""],["exif","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-exif","()",""],["extended","MiniMagick::Configuration","MiniMagick/Configuration.html#method-c-extended","(base)",""],["format","MiniMagick::Image","MiniMagick/Image.html#method-i-format","(format, page = 0)","<p>This is used to change the format of the image. That is, from “tiff to jpg”\nor something like …\n"],["frames","MiniMagick::Image","MiniMagick/Image.html#method-i-frames","()",""],["graphicsmagick?","MiniMagick","MiniMagick.html#method-c-graphicsmagick-3F","()","<p>Checks whether the CLI used is GraphicsMagick.\n<p>@return [Boolean]\n"],["hash","MiniMagick::Image","MiniMagick/Image.html#method-i-hash","()",""],["identify","MiniMagick::Image","MiniMagick/Image.html#method-i-identify","()","<p>Runs `identify` on itself. Accepts an optional block for adding more\noptions to `identify`.\n<p>@example\n\n<pre>image ...</pre>\n"],["identify","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-identify","()",""],["imagemagick?","MiniMagick","MiniMagick.html#method-c-imagemagick-3F","()","<p>Checks whether the CLI used is ImageMagick.\n<p>@return [Boolean]\n"],["import_pixels","MiniMagick::Image","MiniMagick/Image.html#method-c-import_pixels","(blob, columns, rows, depth, map, format = 'png')","<p>Creates an image object from a binary string blob which contains raw pixel\ndata (i.e. no header data). …\n"],["info","MiniMagick::Image","MiniMagick/Image.html#method-i-info","(value)",""],["inherited","MiniMagick::Tool","MiniMagick/Tool.html#method-c-inherited","(child)","<p>@private\n"],["instances","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-c-instances","()",""],["layer?","MiniMagick::Image","MiniMagick/Image.html#method-i-layer-3F","()",""],["layers","MiniMagick::Image","MiniMagick/Image.html#method-i-layers","()","<p>Returns layers of the image. For example, JPEGs are 1-layered, but formats\nlike PSDs, GIFs and PDFs can …\n"],["merge!","MiniMagick::Tool","MiniMagick/Tool.html#method-i-merge-21","(new_args)","<p>Merges a list of raw options.\n<p>@return [self]\n"],["method_missing","MiniMagick::Image","MiniMagick/Image.html#method-i-method_missing","(name, *args)","<p>If an unknown method is called then it is sent through the mogrify program.\n<p>@see www.imagemagick.org/script/mogrify.php …\n"],["mime_type","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-mime_type","()",""],["mogrify","MiniMagick::Image","MiniMagick/Image.html#method-i-mogrify","(page = nil)",""],["new","MiniMagick::Image","MiniMagick/Image.html#method-c-new","(input_path, tempfile = nil, &block)","<p>Create a new {MiniMagick::Image} object.\n<p><em>DANGER</em>: The file location passed in here is the *working copy*. …\n"],["new","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-c-new","(path)",""],["new","MiniMagick::Logger","MiniMagick/Logger.html#method-c-new","(io)",""],["new","MiniMagick::Shell","MiniMagick/Shell.html#method-c-new","(whiny = true)",""],["new","MiniMagick::Tool","MiniMagick/Tool.html#method-c-new","(*args)","<p>Aside from classic instantiation, it also accepts a block, and then\nexecutes the command in the end. …\n"],["new","MiniMagick::Tool","MiniMagick/Tool.html#method-c-new","(name, whiny = MiniMagick.whiny)","<p>@param whiny [Boolean] Whether to raise errors on exit codes different\n\n<pre>than 0.</pre>\n<p>@example\n"],["new","MiniMagick::Tool::Animate","MiniMagick/Tool/Animate.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Compare","MiniMagick/Tool/Compare.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Composite","MiniMagick/Tool/Composite.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Conjure","MiniMagick/Tool/Conjure.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Convert","MiniMagick/Tool/Convert.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Display","MiniMagick/Tool/Display.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Identify","MiniMagick/Tool/Identify.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Import","MiniMagick/Tool/Import.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Mogrify","MiniMagick/Tool/Mogrify.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::Montage","MiniMagick/Tool/Montage.html#method-c-new","(*args)",""],["new","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-c-new","(tool_name)",""],["new","MiniMagick::Tool::Stream","MiniMagick/Tool/Stream.html#method-c-new","(*args)",""],["open","MiniMagick::Image","MiniMagick/Image.html#method-c-open","(path_or_url, ext = nil)","<p>Opens a specific image file either on the local file system or at a URI.\nUse this if you don&#39;t want …\n"],["option","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-option","(*options)","<p>Creates method based on command-line option&#39;s name.\n\n<pre>mogrify = MiniMagick::Tool.new(&quot;mogrify&quot;)\nmogrify.antialias ...</pre>\n"],["output","MiniMagick::Logger","MiniMagick/Logger.html#method-i-output","(data)",""],["pages","MiniMagick::Image","MiniMagick/Image.html#method-i-pages","()",""],["processor=","MiniMagick::Configuration","MiniMagick/Configuration.html#method-i-processor-3D","(processor)",""],["raw","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-raw","(value)",""],["raw_exif","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-raw_exif","(value)",""],["read","MiniMagick::Image","MiniMagick/Image.html#method-c-read","(stream, ext = nil)","<p>This is the primary loading method used by all of the other class methods.\n<p>Use this to pass in a stream …\n"],["reload_methods","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-reload_methods","()","<p>Dynamically generates operator methods from the “-help” page.\n"],["reload_tools","MiniMagick::Configuration","MiniMagick/Configuration.html#method-i-reload_tools","()",""],["resolution","MiniMagick::Image","MiniMagick/Image.html#method-i-resolution","","<p>Returns the resolution of the photo. You can optionally specify the units\nmeasurement.\n<p>@example\n\n<pre>image.resolution(&quot;PixelsPerInch&quot;) ...</pre>\n"],["resolution","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-resolution","(unit = nil)",""],["respond_to_missing?","MiniMagick::Image","MiniMagick/Image.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["run","MiniMagick::Shell","MiniMagick/Shell.html#method-i-run","(command)",""],["run_command","MiniMagick::Image","MiniMagick/Image.html#method-i-run_command","(tool_name, *args)","<p>@private\n"],["signature","MiniMagick::Image::Info","MiniMagick/Image/Info.html#method-i-signature","()",""],["stack","MiniMagick::Tool","MiniMagick/Tool.html#method-i-stack","()","<p>Create an ImageMagick stack in the command (surround.\n<p>@example\n\n<pre>MiniMagick::Tool::Convert.new do |convert| ...</pre>\n"],["tempfile","MiniMagick::Utilities","MiniMagick/Utilities.html#method-i-tempfile","(extension)",""],["to_blob","MiniMagick::Image","MiniMagick/Image.html#method-i-to_blob","()","<p>Returns raw image data.\n<p>@return [String] Binary string\n"],["to_s","MiniMagick::Tool::OptionMethods","MiniMagick/Tool/OptionMethods.html#method-i-to_s","()",""],["type","MiniMagick::Image","MiniMagick/Image.html#method-i-type","","<p>Returns the image format (e.g. “JPEG”, “GIF”).\n<p>@return [String]\n"],["valid?","MiniMagick::Image","MiniMagick/Image.html#method-i-valid-3F","()","<p>Checks to make sure that MiniMagick can read the file and understand it.\n<p>This uses the &#39;identify&#39; …\n"],["validate!","MiniMagick::Image","MiniMagick/Image.html#method-i-validate-21","()","<p>Runs `identify` on the current image, and raises an error if it doesn&#39;t\npass.\n<p>@raise [MiniMagick::Invalid] …\n"],["version","MiniMagick","MiniMagick.html#method-c-version","()","<p>@return [Gem::Version]\n"],["which","MiniMagick::Utilities","MiniMagick/Utilities.html#method-i-which","(cmd)","<p>Cross-platform way of finding an executable in the $PATH.\n<p>@example\n\n<pre>MiniMagick::Utilities.which(&#39;ruby&#39;) ...</pre>\n"],["width","MiniMagick::Image","MiniMagick/Image.html#method-i-width","","<p>@return [Integer]\n"],["with_cli","MiniMagick","MiniMagick.html#method-c-with_cli","(cli)","<p>You might want to execute only certain blocks of processing with a\ndifferent CLI, because for example …\n"],["write","MiniMagick::Image","MiniMagick/Image.html#method-i-write","(output_to)","<p>Writes the temporary file out to either a file location (by passing in a\nString) or by passing in a  …\n"]]}}