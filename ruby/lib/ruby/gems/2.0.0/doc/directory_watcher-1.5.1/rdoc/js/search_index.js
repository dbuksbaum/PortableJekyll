var search_data = {"index":{"searchIndex":["directorywatcher","collector","configuration","coolioscanner","scantimer","watcher","emscanner","scantimer","watcher","event","eventablescanner","filestat","logable","notifier","nulllogger","paths","revscanner","scantimer","watcher","scan","scanandqueue","scanner","threaded","version","==()","add_observer()","added?()","before_starting()","collect_all_stats()","collection_queue()","collection_queue()","continue_on_error=()","continue_on_error?()","count_observers()","debug()","default_logger()","default_options()","delete_observer()","delete_observers()","dump_stats()","each()","each_glob()","emit_event_for()","emit_removed_events()","emitting_stable_events?()","eql?()","error()","event_loop()","event_loop()","fatal()","file_stat()","finished_iterations?()","finished_iterations?()","finished_scans?()","for_removed_path()","from_stats()","glob()","glob=()","glob=()","increment_stable_count()","info()","interval()","interval()","interval()","interval=()","interval=()","interval=()","iterations()","join()","join()","join()","lib_path()","load!()","load_stats()","logger()","logger=()","mark_as_invalid_for_stable_event()","mark_as_valid_for_stable_event()","maximum_iterations()","maximum_iterations()","maximum_iterations=()","maximum_iterations=()","maximum_iterations=()","modified?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notification_queue()","on_modified()","on_removed()","on_scan()","on_scan()","on_stat()","order_by()","path()","pause()","pause()","pause()","paused?()","persist()","persist!()","persist=()","persist=()","persist?()","pre_load?()","progress_towards_maximum_iterations()","queue()","queue_item()","removed?()","removed?()","reset()","results()","resume()","resume()","resume()","root_dir()","run()","run()","run()","run()","run()","run()","run_once()","running?()","running?()","running?()","scan_and_queue()","scan_and_watch_files()","scanner_class()","scans()","send_event_to_observer()","setup_dir()","should_emit?()","should_emit_stable?()","sort_by()","sorted_stats()","stable()","stable=()","stable=()","stable?()","stable_threshold()","start()","start()","start()","start_loop_with_attached_scan_timer()","start_loop_with_attached_scan_timer()","start_loop_with_attached_scan_timer()","status()","stop()","stop()","stop()","stop_loop()","stop_loop()","stop_loop()","sub_path()","teardown_timer_and_watches()","to_s()","to_s()","unwatch_file()","update_stat()","valid_for_stable_event?()","version()","wait()","warn()","watch_file()","with_load_path()","history","readme"],"longSearchIndex":["directorywatcher","directorywatcher::collector","directorywatcher::configuration","directorywatcher::coolioscanner","directorywatcher::coolioscanner::scantimer","directorywatcher::coolioscanner::watcher","directorywatcher::emscanner","directorywatcher::emscanner::scantimer","directorywatcher::emscanner::watcher","directorywatcher::event","directorywatcher::eventablescanner","directorywatcher::filestat","directorywatcher::logable","directorywatcher::notifier","directorywatcher::nulllogger","directorywatcher::paths","directorywatcher::revscanner","directorywatcher::revscanner::scantimer","directorywatcher::revscanner::watcher","directorywatcher::scan","directorywatcher::scanandqueue","directorywatcher::scanner","directorywatcher::threaded","directorywatcher::version","directorywatcher::filestat#==()","directorywatcher#add_observer()","directorywatcher::event#added?()","directorywatcher::scanner#before_starting()","directorywatcher::scan#collect_all_stats()","directorywatcher::collector#collection_queue()","directorywatcher::eventablescanner#collection_queue()","directorywatcher::threaded#continue_on_error=()","directorywatcher::threaded#continue_on_error?()","directorywatcher#count_observers()","directorywatcher::nulllogger#debug()","directorywatcher::logable::default_logger()","directorywatcher::configuration::default_options()","directorywatcher#delete_observer()","directorywatcher#delete_observers()","directorywatcher::collector#dump_stats()","directorywatcher::scan#each()","directorywatcher::scan#each_glob()","directorywatcher::collector#emit_event_for()","directorywatcher::collector#emit_removed_events()","directorywatcher::collector#emitting_stable_events?()","directorywatcher::filestat#eql?()","directorywatcher::nulllogger#error()","directorywatcher::coolioscanner#event_loop()","directorywatcher::revscanner#event_loop()","directorywatcher::nulllogger#fatal()","directorywatcher::scan#file_stat()","directorywatcher::eventablescanner#finished_iterations?()","directorywatcher::threaded#finished_iterations?()","directorywatcher#finished_scans?()","directorywatcher::filestat::for_removed_path()","directorywatcher::event::from_stats()","directorywatcher#glob()","directorywatcher#glob=()","directorywatcher::configuration#glob=()","directorywatcher::collector#increment_stable_count()","directorywatcher::nulllogger#info()","directorywatcher#interval()","directorywatcher::eventablescanner#interval()","directorywatcher::threaded#interval()","directorywatcher#interval=()","directorywatcher::configuration#interval=()","directorywatcher::threaded#interval=()","directorywatcher::threaded#iterations()","directorywatcher#join()","directorywatcher::eventablescanner#join()","directorywatcher::threaded#join()","directorywatcher::paths#lib_path()","directorywatcher#load!()","directorywatcher::collector#load_stats()","directorywatcher::logable#logger()","directorywatcher::configuration#logger=()","directorywatcher::collector#mark_as_invalid_for_stable_event()","directorywatcher::collector#mark_as_valid_for_stable_event()","directorywatcher#maximum_iterations()","directorywatcher::threaded#maximum_iterations()","directorywatcher#maximum_iterations=()","directorywatcher::eventablescanner#maximum_iterations=()","directorywatcher::threaded#maximum_iterations=()","directorywatcher::event#modified?()","directorywatcher::new()","directorywatcher::collector::new()","directorywatcher::configuration::new()","directorywatcher::coolioscanner::new()","directorywatcher::emscanner::new()","directorywatcher::event::new()","directorywatcher::eventablescanner::new()","directorywatcher::filestat::new()","directorywatcher::notifier::new()","directorywatcher::revscanner::new()","directorywatcher::scan::new()","directorywatcher::scanandqueue::new()","directorywatcher::scanner::new()","directorywatcher::collector#notification_queue()","directorywatcher::eventablescanner#on_modified()","directorywatcher::eventablescanner#on_removed()","directorywatcher::collector#on_scan()","directorywatcher::eventablescanner#on_scan()","directorywatcher::collector#on_stat()","directorywatcher::collector#order_by()","directorywatcher::paths#path()","directorywatcher#pause()","directorywatcher::eventablescanner#pause()","directorywatcher::threaded#pause()","directorywatcher::eventablescanner#paused?()","directorywatcher#persist()","directorywatcher#persist!()","directorywatcher#persist=()","directorywatcher::configuration#persist=()","directorywatcher#persist?()","directorywatcher::configuration#pre_load?()","directorywatcher::eventablescanner#progress_towards_maximum_iterations()","directorywatcher::notifier#queue()","directorywatcher::eventablescanner#queue_item()","directorywatcher::event#removed?()","directorywatcher::filestat#removed?()","directorywatcher#reset()","directorywatcher::scan#results()","directorywatcher#resume()","directorywatcher::eventablescanner#resume()","directorywatcher::threaded#resume()","directorywatcher::paths#root_dir()","directorywatcher::collector#run()","directorywatcher::eventablescanner#run()","directorywatcher::notifier#run()","directorywatcher::scan#run()","directorywatcher::scanner#run()","directorywatcher::threaded#run()","directorywatcher#run_once()","directorywatcher#running?()","directorywatcher::eventablescanner#running?()","directorywatcher::threaded#running?()","directorywatcher::scanandqueue#scan_and_queue()","directorywatcher::eventablescanner#scan_and_watch_files()","directorywatcher::configuration#scanner_class()","directorywatcher#scans()","directorywatcher::notifier#send_event_to_observer()","directorywatcher#setup_dir()","directorywatcher::collector#should_emit?()","directorywatcher::collector#should_emit_stable?()","directorywatcher::collector#sort_by()","directorywatcher::collector#sorted_stats()","directorywatcher#stable()","directorywatcher#stable=()","directorywatcher::configuration#stable=()","directorywatcher::event#stable?()","directorywatcher::collector#stable_threshold()","directorywatcher#start()","directorywatcher::eventablescanner#start()","directorywatcher::threaded#start()","directorywatcher::coolioscanner#start_loop_with_attached_scan_timer()","directorywatcher::emscanner#start_loop_with_attached_scan_timer()","directorywatcher::revscanner#start_loop_with_attached_scan_timer()","directorywatcher::threaded#status()","directorywatcher#stop()","directorywatcher::eventablescanner#stop()","directorywatcher::threaded#stop()","directorywatcher::coolioscanner#stop_loop()","directorywatcher::emscanner#stop_loop()","directorywatcher::revscanner#stop_loop()","directorywatcher::paths#sub_path()","directorywatcher::eventablescanner#teardown_timer_and_watches()","directorywatcher::event#to_s()","directorywatcher::filestat#to_s()","directorywatcher::eventablescanner#unwatch_file()","directorywatcher::collector#update_stat()","directorywatcher::collector#valid_for_stable_event?()","directorywatcher::version#version()","directorywatcher::threaded#wait()","directorywatcher::nulllogger#warn()","directorywatcher::eventablescanner#watch_file()","directorywatcher::paths#with_load_path()","",""],"info":[["DirectoryWatcher","","DirectoryWatcher.html","","<p>Synopsis\n<p>A class for watching files within a directory and generating events when\nthose files change. …\n"],["DirectoryWatcher::Collector","","DirectoryWatcher/Collector.html","","<p>Collector reads items from a collection Queue and processes them to see if\nFileEvents should be put onto …\n"],["DirectoryWatcher::Configuration","","DirectoryWatcher/Configuration.html","","<p>The top level configuration options used by DirectoryWatcher are used by\nmany of the sub components for …\n"],["DirectoryWatcher::CoolioScanner","","DirectoryWatcher/CoolioScanner.html","","<p>The CoolioScanner uses the Coolio loop to monitor changes to files in the\nwatched directory. This scanner …\n"],["DirectoryWatcher::CoolioScanner::ScanTimer","","DirectoryWatcher/CoolioScanner/ScanTimer.html","",""],["DirectoryWatcher::CoolioScanner::Watcher","","DirectoryWatcher/CoolioScanner/Watcher.html","",""],["DirectoryWatcher::EmScanner","","DirectoryWatcher/EmScanner.html","","<p>The EmScanner uses the EventMachine reactor loop to monitor changes to\nfiles in the watched directory. …\n"],["DirectoryWatcher::EmScanner::ScanTimer","","DirectoryWatcher/EmScanner/ScanTimer.html","",""],["DirectoryWatcher::EmScanner::Watcher","","DirectoryWatcher/EmScanner/Watcher.html","",""],["DirectoryWatcher::Event","","DirectoryWatcher/Event.html","","<p>An <code>Event</code> structure contains the <em>type</em> of the event and\nthe file <em>path</em> to which the event pertains. The …\n"],["DirectoryWatcher::EventableScanner","","DirectoryWatcher/EventableScanner.html","","<p>An Eventable Scanner is one that can be utilized by something that has an\nEvent Loop. It is intended …\n"],["DirectoryWatcher::FileStat","","DirectoryWatcher/FileStat.html","","<p>FileStat contains file system information about a single file including:\n<p>path  - The fully expanded path …\n"],["DirectoryWatcher::Logable","","DirectoryWatcher/Logable.html","",""],["DirectoryWatcher::Notifier","","DirectoryWatcher/Notifier.html","","<p>A Notifier pull Event instances from the give queue and sends them to all\nof the Observers it knows about. …\n"],["DirectoryWatcher::NullLogger","","DirectoryWatcher/NullLogger.html","","<p>This is the implementation of a logger that does nothing. It has all the\ndebug, info, warn, error, fatal …\n"],["DirectoryWatcher::Paths","","DirectoryWatcher/Paths.html","","<p>Paths contains helpful methods to determine paths of files inside the\nDirectoryWatcher library\n"],["DirectoryWatcher::RevScanner","","DirectoryWatcher/RevScanner.html","","<p>Deprecated:\n<p>The RevScanner uses the Rev loop to monitor changes to files in the watched\ndirectory. This …\n"],["DirectoryWatcher::RevScanner::ScanTimer","","DirectoryWatcher/RevScanner/ScanTimer.html","",""],["DirectoryWatcher::RevScanner::Watcher","","DirectoryWatcher/RevScanner/Watcher.html","",""],["DirectoryWatcher::Scan","","DirectoryWatcher/Scan.html","","<p>A Scan is the scan of a full directory structure with the ability to\niterate over the results, or return …\n"],["DirectoryWatcher::ScanAndQueue","","DirectoryWatcher/ScanAndQueue.html","","<p>ScanAndQueue creates a Scan from its input globs and then sends that Scan\nto its Queue.\n<p>Every time scan_and_queue …\n"],["DirectoryWatcher::Scanner","","DirectoryWatcher/Scanner.html","","<p>The Scanner is responsible for polling the watched directory at a regular\ninterval and generating a  …\n"],["DirectoryWatcher::Threaded","","DirectoryWatcher/Threaded.html","","<p>Synopsis\n<p>The Threaded module is used to perform some activity at a specified\ninterval.\n<p>Details\n"],["DirectoryWatcher::Version","","DirectoryWatcher/Version.html","",""],["==","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-i-3D-3D","( other )",""],["add_observer","DirectoryWatcher","DirectoryWatcher.html#method-i-add_observer","( observer = nil, func = :update, &block )","<p>Adds the given <em>observer</em> as an observer on this directory watcher.\nThe <em>observer</em> will now receive file …\n"],["added?","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-i-added-3F","()","<p>Is the event an added event.\n"],["before_starting","DirectoryWatcher::Scanner","DirectoryWatcher/Scanner.html#method-i-before_starting","()","<p>Set the interval before starting the loop. This allows for interval to be\nset AFTER the DirectoryWatcher …\n"],["collect_all_stats","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-collect_all_stats","()","<p>Collect all the Stats into an Array and return them\n"],["collection_queue","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-collection_queue","()","<p>The queue from which to read items from the scanners. See Configuration.\n"],["collection_queue","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-collection_queue","()","<p>The queue on which to put FileStat and Scan items.\n"],["continue_on_error=","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-continue_on_error-3D","( value )","<p>Set to <code>true</code> to continue running the threaded object even if an\nerror is raised by the <code>run</code> method. The …\n"],["continue_on_error?","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-continue_on_error-3F","()","<p>Returns <code>true</code> if the threaded object should continue running\neven if an error is raised by the run method. …\n"],["count_observers","DirectoryWatcher","DirectoryWatcher.html#method-i-count_observers","()","<p>Return the number of observers associated with this directory watcher..\n"],["debug","DirectoryWatcher::NullLogger","DirectoryWatcher/NullLogger.html#method-i-debug","( msg )",""],["default_logger","DirectoryWatcher::Logable","DirectoryWatcher/Logable.html#method-c-default_logger","()",""],["default_options","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-c-default_options","()","<p>Return a Hash of all the default options\n"],["delete_observer","DirectoryWatcher","DirectoryWatcher.html#method-i-delete_observer","( observer )","<p>Delete <code>observer</code> as an observer of this directory watcher. It\nwill no longer receive notifications.\n"],["delete_observers","DirectoryWatcher","DirectoryWatcher.html#method-i-delete_observers","()","<p>Delete all observers associated with the directory watcher.\n"],["dump_stats","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-dump_stats","( io )","<p>Write the current stats to the given IO object as a YAML document.\n<p>io - The IO object to write the document …\n"],["each","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-each","( &block )","<p>Iterate over each item that matches the glob. The item yielded is a\n::DirectoryWatcher::FileStat object. …\n"],["each_glob","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-each_glob","( &block )","<p>Iterate over each glob, yielding it\n"],["emit_event_for","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-emit_event_for","( old_stat, new_stat )","<p>Determine what type of event to emit, and put that event onto the\nnotification queue.\n<p>old_stat - The old …\n"],["emit_removed_events","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-emit_removed_events","( seen_paths )","<p>Look for removed files and emit removed events for all of them.\n<p>seen_paths - the list of files that we …\n"],["emitting_stable_events?","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-emitting_stable_events-3F","()","<p>Is it legal for us to emit stable events at all. This checks the config to\nsee if that is the case.\n<p>In …\n"],["eql?","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-i-eql-3F","( other )","<p>Compare this FileStat to another object.\n<p>This will only return true when all of the following are true: …\n"],["error","DirectoryWatcher::NullLogger","DirectoryWatcher/NullLogger.html#method-i-error","( msg )",""],["event_loop","DirectoryWatcher::CoolioScanner","DirectoryWatcher/CoolioScanner.html#method-i-event_loop","()","<p>Return the cool.io loop object.\n<p>This is used during the startup, shutdown process and for the Watcher …\n"],["event_loop","DirectoryWatcher::RevScanner","DirectoryWatcher/RevScanner.html#method-i-event_loop","()","<p>Return the rev loop object\n<p>This is used during the startup, shutdown process and for the Watcher to\nattach …\n"],["fatal","DirectoryWatcher::NullLogger","DirectoryWatcher/NullLogger.html#method-i-fatal","( msg )",""],["file_stat","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-file_stat","( fn, if_not_file = false )","<p>Return the stat of of the file in question. If the item is not a file, then\nreturn the value of the passed …\n"],["finished_iterations?","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-finished_iterations-3F","()","<p>Have we completed up to the maximum_iterations?\n"],["finished_iterations?","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-finished_iterations-3F","()","<p>Returns <code>true</code> if the activity thread has finished its maximum\nnumber of iterations or the thread is no …\n"],["finished_scans?","DirectoryWatcher","DirectoryWatcher.html#method-i-finished_scans-3F","()","<p>Returns true if the maximum number of scans has been reached.\n"],["for_removed_path","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-c-for_removed_path","( path )","<p>Create an instance of FileStat that will make sure that the instance method\n<code>removed?</code> returns true when …\n"],["from_stats","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-c-from_stats","( old_stat, new_stat )","<p>Create one of the 4 types of events given the two stats\n<p>The rules are:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">added</span>    =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">old_stat</span> <span class=\"ruby-identifier\">will</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-keyword\">nil</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["glob","DirectoryWatcher","DirectoryWatcher.html#method-i-glob","()",""],["glob=","DirectoryWatcher","DirectoryWatcher.html#method-i-glob-3D","( val )","<p>Sets the glob pattern that will be used when scanning the directory for\nfiles. A single glob pattern …\n"],["glob=","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-glob-3D","( val )","<p>Sets the glob pattern that will be used when scanning the directory for\nfiles. A single glob pattern …\n"],["increment_stable_count","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-increment_stable_count","( path )","<p>Increment the stable count for the given path\n<p>path - the path of the file to increment its stable count …\n"],["info","DirectoryWatcher::NullLogger","DirectoryWatcher/NullLogger.html#method-i-info","( msg )",""],["interval","DirectoryWatcher","DirectoryWatcher.html#method-i-interval","()",""],["interval","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-interval","()","<p>The interval at which to scan\n"],["interval","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-interval","()","<p>Returns the number of seconds to sleep between invocations of the threaded\nobject&#39;s &#39;run&#39; …\n"],["interval=","DirectoryWatcher","DirectoryWatcher.html#method-i-interval-3D","( val )","<p>Sets the directory scan interval. The directory will be scanned every\n<em>interval</em> seconds for changes to …\n"],["interval=","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-interval-3D","( val )","<p>Sets the directory scan interval. The directory will be scanned every\n<em>interval</em> seconds for changes to …\n"],["interval=","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-interval-3D","( value )","<p>Sets the number of seconds to sleep between invocations of the threaded\nobject&#39;s &#39;run&#39; method. …\n"],["iterations","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-iterations","()","<p>Returns the number of iterations of the threaded object&#39;s &#39;run&#39;\nmethod completed thus far. …\n"],["join","DirectoryWatcher","DirectoryWatcher.html#method-i-join","( limit = nil )","<p>If the directory watcher is running, the calling thread will suspend\nexecution and run the directory …\n"],["join","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-join","( limit = nil )","<p>EventableScanners do not join\n"],["join","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-join","( limit = nil )","<p>If the activity thread is running, the calling thread will suspend\nexecution and run the activity thread. …\n"],["lib_path","DirectoryWatcher::Paths","DirectoryWatcher/Paths.html#method-i-lib_path","(*args,&block)","<p>Return a path relative to the &#39;lib&#39; directory in this project\n"],["load!","DirectoryWatcher","DirectoryWatcher.html#method-i-load-21","()","<p>Loads the state of the directory watcher from the persist file. This method\nwill do nothing if the directory …\n"],["load_stats","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-load_stats","( io )","<p>Read the current stats from the given IO object. Any existing stats in the\nCollector will be overwritten …\n"],["logger","DirectoryWatcher::Logable","DirectoryWatcher/Logable.html#method-i-logger","()",""],["logger=","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-logger-3D","( val )","<p>Sets the logger instance. This will be used by all classes for logging\n"],["mark_as_invalid_for_stable_event","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-mark_as_invalid_for_stable_event","( path )","<p>Mark that the given path is invalid for having a stable event emitted for\nit.\n<p>path - the path to mark …\n"],["mark_as_valid_for_stable_event","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-mark_as_valid_for_stable_event","( path )","<p>Let it be known that the given path can now have a stable event emitted for\nit.\n<p>path - the path to mark …\n"],["maximum_iterations","DirectoryWatcher","DirectoryWatcher.html#method-i-maximum_iterations","()","<p>Returns the maximum number of scans the directory scanner will perform\n"],["maximum_iterations","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-maximum_iterations","()","<p>Returns the maximum number of invocations of the threaded object&#39;s\n&#39;run&#39; method\n"],["maximum_iterations=","DirectoryWatcher","DirectoryWatcher.html#method-i-maximum_iterations-3D","( value )","<p>Sets the maximum number of scans the scanner is to make on the directory\n"],["maximum_iterations=","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-maximum_iterations-3D","(value)","<p>Setting maximum iterations means hooking into the periodic timer event and\ncounting the number of times …\n"],["maximum_iterations=","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-maximum_iterations-3D","( value )","<p>Sets the maximum number of invocations of the threaded object&#39;s\n&#39;run&#39; method\n"],["modified?","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-i-modified-3F","()","<p>Is the event a modified event.\n"],["new","DirectoryWatcher","DirectoryWatcher.html#method-c-new","( directory, opts = {} )","<p>Create a new <code>DirectoryWatcher</code> that will generate events when\nfile changes are detected in the given  …\n"],["new","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-c-new","( config )","\n<pre>Create a new StatCollector from the given Configuration, and an optional\nScan.\n\nconfiguration - The Collector ...</pre>\n"],["new","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-c-new","( options = {} )","<p>Create a new Configuration by blending the passed in items with the\ndefaults\n"],["new","DirectoryWatcher::CoolioScanner","DirectoryWatcher/CoolioScanner.html#method-c-new","( config )",""],["new","DirectoryWatcher::EmScanner","DirectoryWatcher/EmScanner.html#method-c-new","( config )",""],["new","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-c-new","( type, path, stat = nil )","<p>Create a new Event with one of the 4 types and the path of the file.\n"],["new","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-c-new","( config )","<p>config - the Configuration instances\n"],["new","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-c-new","( path, mtime, size )","<p>Create a new instance of FileStat with the given path, mtime and size\n"],["new","DirectoryWatcher::Notifier","DirectoryWatcher/Notifier.html#method-c-new","( config, observers )","<p>Create a new Notifier that pulls events off the given notification_queue\nfrom the config, and sends them …\n"],["new","DirectoryWatcher::RevScanner","DirectoryWatcher/RevScanner.html#method-c-new","( glob, interval, collection_queue )",""],["new","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-c-new","( globs = Array.new )",""],["new","DirectoryWatcher::ScanAndQueue","DirectoryWatcher/ScanAndQueue.html#method-c-new","( glob, queue )",""],["new","DirectoryWatcher::Scanner","DirectoryWatcher/Scanner.html#method-c-new","( config )","\n<pre>From the Configuration instance passed in Scanner uses:\n\nglob             - Same as that in DirectoryWatcher ...</pre>\n"],["notification_queue","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-notification_queue","()","<p>The queue to write Events for the Notifier. See Configuration.\n"],["on_modified","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-on_modified","(watcher, new_stat)","<p>This callback is invoked by the Watcher instance when it is triggered by\nthe loop for file modifications. …\n"],["on_removed","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-on_removed","(watcher, new_stat)","<p>This callback is invoked by the Watcher instance when it is triggered by\nthe loop for file removals\n"],["on_scan","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-on_scan","( scan, emit_events = true )","<p>Given the scan, update the set of stats with the results from the Scan and\nemit events to the notification …\n"],["on_scan","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-on_scan","()","<p>This callback is invoked by the Timer instance when it is triggered by the\nLoop. This method will check …\n"],["on_stat","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-on_stat","( stat, emit_event = true )","<p>Process a single stat and emit an event if necessary.\n<p>stat       - The new FileStat to process and see …\n"],["order_by","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-order_by","()","<p>How to order Scan results. See Configuration.\n"],["path","DirectoryWatcher::Paths","DirectoryWatcher/Paths.html#method-i-path","(*args,&block)","<p>Return a path relative to the &#39;root&#39; directory in the project\n"],["pause","DirectoryWatcher","DirectoryWatcher.html#method-i-pause","()","<p>Pauses the scanner.\n"],["pause","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-pause","()","<p>Pause the scanner.\n<p>Pausing the scanner does not stop the scanning per se, it stops items from\nbeing sent …\n"],["pause","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-pause","()","<p>Stop the activity thread from doing work. This will not stop the activity\nthread, it will just stop it …\n"],["paused?","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-paused-3F","()","<p>Is the Scanner currently paused.\n"],["persist","DirectoryWatcher","DirectoryWatcher.html#method-i-persist","()",""],["persist!","DirectoryWatcher","DirectoryWatcher.html#method-i-persist-21","()","<p>Write the current state of the directory watcher to the persist file. This\nmethod will do nothing if …\n"],["persist=","DirectoryWatcher","DirectoryWatcher.html#method-i-persist-3D","( filename )","<p>Sets the name of the file to which the directory watcher state will be\npersisted when it is stopped. …\n"],["persist=","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-persist-3D","( filename )","<p>Sets the name of the file to which the directory watcher state will be\npersisted when it is stopped. …\n"],["persist?","DirectoryWatcher","DirectoryWatcher.html#method-i-persist-3F","()","<p>Is persistence done on this DirectoryWatcher\n"],["pre_load?","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-pre_load-3F","()","<p>Is pre_load set or not\n"],["progress_towards_maximum_iterations","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-progress_towards_maximum_iterations","()","<p>Make progress towards maximum iterations. And if we get there, then stop\nmonitoring files.\n"],["queue","DirectoryWatcher::Notifier","DirectoryWatcher/Notifier.html#method-i-queue","()",""],["queue_item","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-queue_item","( item )","<p>Send the given item to the collection queue\n"],["removed?","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-i-removed-3F","()","<p>Is the event a removed event.\n"],["removed?","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-i-removed-3F","()","<p>Is the file represented by this FileStat to be considered removed?\n<p>FileStat doesn&#39;t actually go to …\n"],["reset","DirectoryWatcher","DirectoryWatcher.html#method-i-reset","( pre_load = false )","<p>Reset the directory watcher state by clearing the stored file list. If the\ndirectory watcher is running, …\n"],["results","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-results","()","<p>Return the results of the scan. If the scan has not been run yet, then run\nit\n"],["resume","DirectoryWatcher","DirectoryWatcher.html#method-i-resume","()","<p>Resume the emitting of events\n"],["resume","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-resume","()","<p>Resume the scanner.\n<p>This removes the blockage on sending items to the collection queue.\n"],["resume","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-resume","()","<p>Resume the activity thread\n"],["root_dir","DirectoryWatcher::Paths","DirectoryWatcher/Paths.html#method-i-root_dir","()","<p>The root directory of the project is considered the parent directory of the\n&#39;lib&#39; directory. …\n"],["run","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-run","()","<p>Remove one item from the collection queue and process it.\n<p>This method is required by the Threaded API …\n"],["run","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-run","()","<p>Do a single scan and send those items to the collection queue.\n"],["run","DirectoryWatcher::Notifier","DirectoryWatcher/Notifier.html#method-i-run","()","<p>Notify all the observers of all the available events in the queue. If there\nare 2 or more events in a …\n"],["run","DirectoryWatcher::Scan","DirectoryWatcher/Scan.html#method-i-run","()","<p>Run the entire scan and collect all the results. The Scan will only ever be\nrun once.\n<p>Return the array …\n"],["run","DirectoryWatcher::Scanner","DirectoryWatcher/Scanner.html#method-i-run","()","<p>Performs exactly one scan of the directory and sends the results to the\nCollector\n"],["run","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-run","()","<p>This method will be called by the activity thread at the desired interval.\nImplementing classes are expect …\n"],["run_once","DirectoryWatcher","DirectoryWatcher.html#method-i-run_once","()","<p>Performs exactly one scan of the directory for file changes and notifies\nthe observers.\n"],["running?","DirectoryWatcher","DirectoryWatcher.html#method-i-running-3F","()","<p>Returns <code>true</code> if the directory watcher is currently running.\nReturns <code>false</code> if this is not the case.\n"],["running?","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-running-3F","()","<p>Returns <code>true</code> if the scanner is currently running. Returns\n<code>false</code> if this is not the case.\n"],["running?","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-running-3F","()","<p>Returns <code>true</code> if the activity thread is running. Returns\n<code>false</code> otherwise.\n"],["scan_and_queue","DirectoryWatcher::ScanAndQueue","DirectoryWatcher/ScanAndQueue.html#method-i-scan_and_queue","()","<p>Create and run a Scan and submit it to the Queue.\n<p>Returns the Scan that was run\n"],["scan_and_watch_files","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-scan_and_watch_files","()","<p>Run a single scan and turn on watches for all the files found in that scan\nthat do not already have watchers …\n"],["scanner_class","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-scanner_class","()","<p>The class of the scanner\n"],["scans","DirectoryWatcher","DirectoryWatcher.html#method-i-scans","()","<p>Returns the number of scans of the directory scanner it has completed thus\nfar.\n<p>This will always report …\n"],["send_event_to_observer","DirectoryWatcher::Notifier","DirectoryWatcher/Notifier.html#method-i-send_event_to_observer","( observer, func, event )","<p>Send the given event to the given observer using the given function.\n<p>Capture any exceptions that have, …\n"],["setup_dir","DirectoryWatcher","DirectoryWatcher.html#method-i-setup_dir","( dir )","<p>Setup the directory existence.\n<p>Raise an error if the item passed in does exist but is not a directory …\n"],["should_emit?","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-should_emit-3F","( event )","<p>Should the event given actually be emitted.\n<p>If the event passed in is NOT a stable event, return true …\n"],["should_emit_stable?","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-should_emit_stable-3F","( path )","<p>Is the given path ready to have a stable event emitted?\n<p>path - the path to report on\n<p>Returns whether to …\n"],["sort_by","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-sort_by","()","<p>How to sort Scan results. See Configuration.\n"],["sorted_stats","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-sorted_stats","( stats )","<p>Sort the stats by <code>sort_by</code> and <code>order_by</code> returning\nthe results\n"],["stable","DirectoryWatcher","DirectoryWatcher.html#method-i-stable","()",""],["stable=","DirectoryWatcher","DirectoryWatcher.html#method-i-stable-3D","( val )","<p>Sets the number of intervals a file must remain unchanged before it is\nconsidered “stable”. …\n"],["stable=","DirectoryWatcher::Configuration","DirectoryWatcher/Configuration.html#method-i-stable-3D","( val )","<p>Sets the number of intervals a file must remain unchanged before it is\nconsidered “stable”. …\n"],["stable?","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-i-stable-3F","()","<p>Is the event a stable event.\n"],["stable_threshold","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-stable_threshold","()","<p>The number of times we see a file hasn&#39;t changed before emitting a\nstable count. See Configuration#stable …\n"],["start","DirectoryWatcher","DirectoryWatcher.html#method-i-start","()","<p>Start the directory watcher scanning thread. If the directory watcher is\nalready running, this method …\n"],["start","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-start","()","<p>Start up the scanner. If the scanner is already running, nothing happens.\n"],["start","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-start","()","<p>Start the activity thread. If already started this method will return\nwithout taking any action.\n<p>If the …\n"],["start_loop_with_attached_scan_timer","DirectoryWatcher::CoolioScanner","DirectoryWatcher/CoolioScanner.html#method-i-start_loop_with_attached_scan_timer","()","<p>Called by EventablScanner#start to start the loop up and attach the\nperiodic timer that will poll the …\n"],["start_loop_with_attached_scan_timer","DirectoryWatcher::EmScanner","DirectoryWatcher/EmScanner.html#method-i-start_loop_with_attached_scan_timer","()","<p>Called by EventablScanner#start to start the loop up and attach the\nperiodic timer that will poll the …\n"],["start_loop_with_attached_scan_timer","DirectoryWatcher::RevScanner","DirectoryWatcher/RevScanner.html#method-i-start_loop_with_attached_scan_timer","()","<p>Called by EventablScanner#start to start the loop up and attach the\nperiodic timer that will poll the …\n"],["status","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-status","()","<p>Returns the status of threaded object.\n\n<pre>&#39;sleep&#39;    : sleeping or waiting on I/O\n&#39;run&#39;      : executing ...</pre>\n"],["stop","DirectoryWatcher","DirectoryWatcher.html#method-i-stop","()","<p>Stop the directory watcher scanning thread. If the directory watcher is\nalready stopped, this method …\n"],["stop","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-stop","()","<p>Stop the scanner. If the scanner is not running, nothing happens.\n"],["stop","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-stop","()","<p>Stop the activity thread. If already stopped this method will return\nwithout taking any action.\n<p>If the …\n"],["stop_loop","DirectoryWatcher::CoolioScanner","DirectoryWatcher/CoolioScanner.html#method-i-stop_loop","()","<p>Called by EventableScanner#stop to stop the loop as part of the shutdown\nprocess.\n"],["stop_loop","DirectoryWatcher::EmScanner","DirectoryWatcher/EmScanner.html#method-i-stop_loop","()","<p>Called by EventableScanner#stop to stop the loop as part of the shutdown\nprocess.\n"],["stop_loop","DirectoryWatcher::RevScanner","DirectoryWatcher/RevScanner.html#method-i-stop_loop","()","<p>Called by EventableScanner#stop to stop the loop as part of the shutdown\nprocess.\n"],["sub_path","DirectoryWatcher::Paths","DirectoryWatcher/Paths.html#method-i-sub_path","(sub,*args,&block)","<p>Calculate the full expanded path of the item with respect to a sub path of\n&#39;root_dir&#39;\n"],["teardown_timer_and_watches","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-teardown_timer_and_watches","()","<p>Remove the timer and the watches from the event loop\n"],["to_s","DirectoryWatcher::Event","DirectoryWatcher/Event.html#method-i-to_s","( )","<p>Convert the Event to a nice string format\n"],["to_s","DirectoryWatcher::FileStat","DirectoryWatcher/FileStat.html#method-i-to_s","()","<p>Create a nice string based representation of this instance.\n"],["unwatch_file","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-unwatch_file","( fn )","<p>Remove the watcher instance from our tracking\n"],["update_stat","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-update_stat","( new_stat )","<p>Update the stats Hash with the new_stat information, return the old data\nthat is being replaced.\n"],["valid_for_stable_event?","DirectoryWatcher::Collector","DirectoryWatcher/Collector.html#method-i-valid_for_stable_event-3F","( path )","<p>Is the given path able to have a stable event emitted for it?\n<p>A stable event may only be emitted for a …\n"],["version","DirectoryWatcher::Version","DirectoryWatcher/Version.html#method-i-version","()",""],["wait","DirectoryWatcher::Threaded","DirectoryWatcher/Threaded.html#method-i-wait","( limit = nil )","<p>Wait on the activity thread.  If the thread is already stopped, this method\nwill return without taking …\n"],["warn","DirectoryWatcher::NullLogger","DirectoryWatcher/NullLogger.html#method-i-warn","( msg )",""],["watch_file","DirectoryWatcher::EventableScanner","DirectoryWatcher/EventableScanner.html#method-i-watch_file","( fn )","<p>Create and return a new Watcher instance for the given filename\n<em>fn</em>. A watcher will only be created once …\n"],["with_load_path","DirectoryWatcher::Paths","DirectoryWatcher/Paths.html#method-i-with_load_path","(path, &block)","<p>Execute a block in the context of a path added to $LOAD_PATH\n"],["History","","History_txt.html","","<p>Next Version / 2011-XX-XX\n<p>Major Enhancements\n<p>tests!\n"],["README","","README_txt.html","","<p>Directory Watcher\n\n<pre>by Tim Pease\nhttp://codeforpeople.rubyforge.org/directory_watcher</pre>\n<p>DESCRIPTION:\n"]]}}