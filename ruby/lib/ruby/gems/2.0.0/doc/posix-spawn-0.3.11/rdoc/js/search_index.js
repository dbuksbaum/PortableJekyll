var search_data = {"index":{"searchIndex":["io","posix","spawn","child","maximumoutputexceeded","timeoutexceeded","`()","adjust_process_spawn_argv()","build()","default_file_reopen_info()","exec!()","extract_process_spawn_arguments()","fd?()","fd_to_io()","flatten_process_spawn_options!()","fspawn()","new()","normalize_process_spawn_redirect_file_options!()","popen4()","posix_fileno()","pspawn()","read_and_write()","spawn()","success?()","system()","system_command_prefixes()","waitpid()","copying","hacking"],"longSearchIndex":["io","posix","posix::spawn","posix::spawn::child","posix::spawn::maximumoutputexceeded","posix::spawn::timeoutexceeded","posix::spawn#`()","posix::spawn#adjust_process_spawn_argv()","posix::spawn::child::build()","posix::spawn#default_file_reopen_info()","posix::spawn::child#exec!()","posix::spawn#extract_process_spawn_arguments()","posix::spawn#fd?()","posix::spawn#fd_to_io()","posix::spawn#flatten_process_spawn_options!()","posix::spawn#fspawn()","posix::spawn::child::new()","posix::spawn#normalize_process_spawn_redirect_file_options!()","posix::spawn#popen4()","io#posix_fileno()","posix::spawn#pspawn()","posix::spawn::child#read_and_write()","posix::spawn#spawn()","posix::spawn::child#success?()","posix::spawn#system()","posix::spawn#system_command_prefixes()","posix::spawn::child#waitpid()","",""],"info":[["IO","","IO.html","",""],["POSIX","","POSIX.html","",""],["POSIX::Spawn","","POSIX/Spawn.html","","<p>The POSIX::Spawn module implements a compatible subset of Ruby 1.9&#39;s\nProcess::spawn and related methods …\n"],["POSIX::Spawn::Child","","POSIX/Spawn/Child.html","","<p>POSIX::Spawn::Child includes logic for executing child processes and\nreading/writing from their standard …\n"],["POSIX::Spawn::MaximumOutputExceeded","","POSIX/Spawn/MaximumOutputExceeded.html","","<p>Exception raised when the total number of bytes output on the command&#39;s\nstderr and stdout streams …\n"],["POSIX::Spawn::TimeoutExceeded","","POSIX/Spawn/TimeoutExceeded.html","","<p>Exception raised when timeout is exceeded.\n"],["`","POSIX::Spawn","POSIX/Spawn.html#method-i-60","(cmd)","<p>Executes a command in a subshell using the system&#39;s shell interpreter\nand returns anything written …\n"],["adjust_process_spawn_argv","POSIX::Spawn","POSIX/Spawn.html#method-i-adjust_process_spawn_argv","(args)","<p>Converts the various supported command argument variations into a standard\nargv suitable for use with …\n"],["build","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-c-build","(*args)","<p>Set up a new process to spawn, but do not actually spawn it.\n<p>Invoke this just like the normal constructor …\n"],["default_file_reopen_info","POSIX::Spawn","POSIX/Spawn.html#method-i-default_file_reopen_info","(fd, file)","<p>The default [file, flags, mode] tuple for a given fd and filename. The\ndefault flags vary based on the …\n"],["exec!","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-i-exec-21","()","<p>Execute command, write input, and read output. This is called immediately\nwhen a new instance of this …\n"],["extract_process_spawn_arguments","POSIX::Spawn","POSIX/Spawn.html#method-i-extract_process_spawn_arguments","(*args)","<p>Turns the various varargs incantations supported by Process::spawn into a\nsimple [env, argv, options] …\n"],["fd?","POSIX::Spawn","POSIX/Spawn.html#method-i-fd-3F","(object)","<p>Determine whether object is fd-like.\n<p>Returns true if object is an instance of IO, Fixnum &gt;= 0, or one …\n"],["fd_to_io","POSIX::Spawn","POSIX/Spawn.html#method-i-fd_to_io","(object)","<p>Convert a fd identifier to an IO object.\n<p>Returns nil or an instance of IO.\n"],["flatten_process_spawn_options!","POSIX::Spawn","POSIX/Spawn.html#method-i-flatten_process_spawn_options-21","(options)","<p>Convert { [fd1, fd2, …] =&gt; (:close|fd) } options to individual keys,\nlike: { fd1 =&gt; :close, fd2 …\n"],["fspawn","POSIX::Spawn","POSIX/Spawn.html#method-i-fspawn","(*args)","<p>Spawn a child process with a variety of options using a pure Ruby fork +\nexec. Supports the standard …\n"],["new","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-c-new","(*args)","<p>Spawn a new process, write all input and read all output, and wait for the\nprogram to exit. Supports …\n"],["normalize_process_spawn_redirect_file_options!","POSIX::Spawn","POSIX/Spawn.html#method-i-normalize_process_spawn_redirect_file_options-21","(options)","<p>Convert variations of redirecting to a file to a standard tuple.\n<p>:in   =&gt; &#39;/some/file&#39;   =&gt; …\n"],["popen4","POSIX::Spawn","POSIX/Spawn.html#method-i-popen4","(*argv)","<p>Spawn a child process with all standard IO streams piped in and out of the\nspawning process. Supports …\n"],["posix_fileno","IO","IO.html#method-i-posix_fileno","()",""],["pspawn","POSIX::Spawn","POSIX/Spawn.html#method-i-pspawn","(*args)","<p>Spawn a child process with a variety of options using the posix_spawn(2)\nsystems interfaces. Supports …\n"],["read_and_write","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-i-read_and_write","(input, stdin, stdout, stderr, timeout=nil, max=nil)","<p>Start a select loop writing any input on the child&#39;s stdin and reading\nany output from the child&#39;s …\n"],["spawn","POSIX::Spawn","POSIX/Spawn.html#method-i-spawn","(*args)","<p>Spawn a child process with a variety of options using the best available\nimplementation for the current …\n"],["success?","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-i-success-3F","()","<p>Determine if the process did exit with a zero exit status.\n"],["system","POSIX::Spawn","POSIX/Spawn.html#method-i-system","(*args)","<p>Executes a command and waits for it to complete. The command&#39;s exit\nstatus is available as $?. Supports …\n"],["system_command_prefixes","POSIX::Spawn","POSIX/Spawn.html#method-i-system_command_prefixes","()","<p>Derives the shell command to use when running the spawn.\n<p>On a Windows machine, this will yield:\n\n<pre>[[&#39;cmd.exe&#39;, ...</pre>\n"],["waitpid","POSIX::Spawn::Child","POSIX/Spawn/Child.html#method-i-waitpid","(pid)","<p>Wait for the child process to exit\n<p>Returns the Process::Status object obtained by reaping the process. …\n"],["COPYING","","COPYING.html","","<p>Copyright © 2011 by Ryan Tomayko &lt;r@tomayko.com&gt;\n\n<pre>and Aman Gupta &lt;aman@tmm1.net&gt;</pre>\n<p>Permission  is …\n"],["HACKING","","HACKING.html","","<p>Clone the project:\n\n<pre>git clone http://github.com/rtomayko/posix-spawn.git\ncd posix-spawn\nbundle install</pre>\n"]]}}