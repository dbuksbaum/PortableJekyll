var search_data = {"index":{"searchIndex":["celluloid","io","dnsresolver","mailbox","reactor","sslserver","sslsocket","stream","latch","tcpserver","tcpsocket","udpsocket","unixserver","unixsocket","<<()","accept()","accept()","accept()","accept()","accept_nonblock()","accept_nonblock()","build_query()","close()","connect()","consume_rbuff()","copy_stream()","do_write()","each()","each_byte()","each_line()","eof()","eof?()","evented?()","fill_rbuff()","flush()","from_ruby_server()","from_ruby_socket()","from_ruby_socket()","generate_id()","getc()","gets()","included()","nameservers()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open()","open()","open()","print()","printf()","puts()","read()","readchar()","readline()","readlines()","readpartial()","recv()","recvfrom()","resolv()","resolve()","resolve_host()","resolve_hostname()","resolve_ip()","run_once()","send()","synchronize()","sysread()","syswrite()","to_io()","to_io()","to_io()","to_io()","to_io()","to_io()","try_convert()","ungetc()","wait()","wait_readable()","wait_readable()","wait_readable()","wait_readable()","wait_readable()","wait_writable()","wait_writable()","wait_writable()","wait_writable()","write()"],"longSearchIndex":["celluloid","celluloid::io","celluloid::io::dnsresolver","celluloid::io::mailbox","celluloid::io::reactor","celluloid::io::sslserver","celluloid::io::sslsocket","celluloid::io::stream","celluloid::io::stream::latch","celluloid::io::tcpserver","celluloid::io::tcpsocket","celluloid::io::udpsocket","celluloid::io::unixserver","celluloid::io::unixsocket","celluloid::io::stream#<<()","celluloid::io::sslserver#accept()","celluloid::io::sslsocket#accept()","celluloid::io::tcpserver#accept()","celluloid::io::unixserver#accept()","celluloid::io::tcpserver#accept_nonblock()","celluloid::io::unixserver#accept_nonblock()","celluloid::io::dnsresolver#build_query()","celluloid::io::stream#close()","celluloid::io::sslsocket#connect()","celluloid::io::stream#consume_rbuff()","celluloid::io::copy_stream()","celluloid::io::stream#do_write()","celluloid::io::stream#each()","celluloid::io::stream#each_byte()","celluloid::io::stream#each_line()","celluloid::io::stream#eof()","celluloid::io::stream#eof?()","celluloid::io::evented?()","celluloid::io::stream#fill_rbuff()","celluloid::io::stream#flush()","celluloid::io::tcpserver::from_ruby_server()","celluloid::io::tcpsocket::from_ruby_socket()","celluloid::io::unixsocket::from_ruby_socket()","celluloid::io::dnsresolver::generate_id()","celluloid::io::stream#getc()","celluloid::io::stream#gets()","celluloid::io::included()","celluloid::io::dnsresolver::nameservers()","celluloid::io::dnsresolver::new()","celluloid::io::mailbox::new()","celluloid::io::reactor::new()","celluloid::io::sslserver::new()","celluloid::io::sslsocket::new()","celluloid::io::stream::new()","celluloid::io::stream::latch::new()","celluloid::io::tcpserver::new()","celluloid::io::tcpsocket::new()","celluloid::io::udpsocket::new()","celluloid::io::unixserver::new()","celluloid::io::unixsocket::new()","celluloid::io::tcpsocket::open()","celluloid::io::unixserver::open()","celluloid::io::unixsocket::open()","celluloid::io::stream#print()","celluloid::io::stream#printf()","celluloid::io::stream#puts()","celluloid::io::stream#read()","celluloid::io::stream#readchar()","celluloid::io::stream#readline()","celluloid::io::stream#readlines()","celluloid::io::stream#readpartial()","celluloid::io::tcpsocket#recv()","celluloid::io::udpsocket#recvfrom()","celluloid::io::dnsresolver#resolv()","celluloid::io::dnsresolver#resolve()","celluloid::io::dnsresolver#resolve_host()","celluloid::io::dnsresolver#resolve_hostname()","celluloid::io::dnsresolver#resolve_ip()","celluloid::io::reactor#run_once()","celluloid::io::tcpsocket#send()","celluloid::io::stream::latch#synchronize()","celluloid::io::stream#sysread()","celluloid::io::stream#syswrite()","celluloid::io::sslsocket#to_io()","celluloid::io::tcpserver#to_io()","celluloid::io::tcpsocket#to_io()","celluloid::io::udpsocket#to_io()","celluloid::io::unixserver#to_io()","celluloid::io::unixsocket#to_io()","celluloid::io::try_convert()","celluloid::io::stream#ungetc()","celluloid::io::reactor#wait()","celluloid::io#wait_readable()","celluloid::io::wait_readable()","celluloid::io::reactor#wait_readable()","celluloid::io::stream#wait_readable()","celluloid::io::udpsocket#wait_readable()","celluloid::io::wait_writable()","celluloid::io#wait_writable()","celluloid::io::reactor#wait_writable()","celluloid::io::stream#wait_writable()","celluloid::io::stream#write()"],"info":[["Celluloid","","Celluloid.html","","<p>Partially adapted from Ruby&#39;s OpenSSL::Buffering Originally from the\n&#39;OpenSSL for Ruby 2&#39; …\n"],["Celluloid::IO","","Celluloid/IO.html","","<p>Actors with evented IO support\n"],["Celluloid::IO::DNSResolver","","Celluloid/IO/DNSResolver.html","","<p>Asynchronous DNS resolver using Celluloid::IO::UDPSocket\n"],["Celluloid::IO::Mailbox","","Celluloid/IO/Mailbox.html","","<p>An alternative implementation of Celluloid::Mailbox using Reactor\n"],["Celluloid::IO::Reactor","","Celluloid/IO/Reactor.html","","<p>React to external I/O events. This is kinda sorta supposed to resemble the\nReactor design pattern.\n"],["Celluloid::IO::SSLServer","","Celluloid/IO/SSLServer.html","","<p>SSLServer wraps a TCPServer to provide immediate SSL accept\n"],["Celluloid::IO::SSLSocket","","Celluloid/IO/SSLSocket.html","","<p>SSLSocket with Celluloid::IO support\n"],["Celluloid::IO::Stream","","Celluloid/IO/Stream.html","","<p>Base class of all streams in Celluloid::IO\n"],["Celluloid::IO::Stream::Latch","","Celluloid/IO/Stream/Latch.html","","<p>Perform an operation exclusively, uncontested by other tasks\n"],["Celluloid::IO::TCPServer","","Celluloid/IO/TCPServer.html","","<p>TCPServer with combined blocking and evented support\n"],["Celluloid::IO::TCPSocket","","Celluloid/IO/TCPSocket.html","","<p>TCPSocket with combined blocking and evented support\n"],["Celluloid::IO::UDPSocket","","Celluloid/IO/UDPSocket.html","","<p>UDPSockets with combined blocking and evented support\n"],["Celluloid::IO::UNIXServer","","Celluloid/IO/UNIXServer.html","","<p>UNIXServer with combined blocking and evented support\n"],["Celluloid::IO::UNIXSocket","","Celluloid/IO/UNIXSocket.html","","<p>UNIXSocket with combined blocking and evented support\n"],["<<","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-3C-3C","(s)","<p>Writes <code>s</code> to the stream.  <code>s</code> will be converted to a\nString using String#to_s.\n"],["accept","Celluloid::IO::SSLServer","Celluloid/IO/SSLServer.html#method-i-accept","()",""],["accept","Celluloid::IO::SSLSocket","Celluloid/IO/SSLSocket.html#method-i-accept","()",""],["accept","Celluloid::IO::TCPServer","Celluloid/IO/TCPServer.html#method-i-accept","()",""],["accept","Celluloid::IO::UNIXServer","Celluloid/IO/UNIXServer.html#method-i-accept","()",""],["accept_nonblock","Celluloid::IO::TCPServer","Celluloid/IO/TCPServer.html#method-i-accept_nonblock","()",""],["accept_nonblock","Celluloid::IO::UNIXServer","Celluloid/IO/UNIXServer.html#method-i-accept_nonblock","()",""],["build_query","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-build_query","(hostname)",""],["close","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-close","()","<p>Closes the stream and flushes any unwritten data.\n"],["connect","Celluloid::IO::SSLSocket","Celluloid/IO/SSLSocket.html#method-i-connect","()",""],["consume_rbuff","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-consume_rbuff","(size=nil)","<p>Consumes <code>size</code> bytes from the buffer\n"],["copy_stream","Celluloid::IO","Celluloid/IO.html#method-c-copy_stream","(src, dst, copy_length = nil, src_offset = nil)",""],["do_write","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-do_write","(s)","<p>Writes <code>s</code> to the buffer.  When the buffer is full or #sync is\ntrue the buffer is flushed to the underlying …\n"],["each","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-each","(eol=$/)","<p>Executes the block for every line in the stream where lines are separated\nby <code>eol</code>.\n<p>See also #gets\n"],["each_byte","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-each_byte","()","<p>Calls the given block once for each byte in the stream.\n"],["each_line","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-each_line","(eol=$/)",""],["eof","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-eof","()",""],["eof?","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-eof-3F","()","<p>Returns true if the stream is at file which means there is no more data to\nbe read.\n"],["evented?","Celluloid::IO","Celluloid/IO.html#method-c-evented-3F","()",""],["fill_rbuff","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-fill_rbuff","()","<p>Fills the buffer from the underlying stream\n"],["flush","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-flush","()","<p>Flushes buffered data to the stream.\n"],["from_ruby_server","Celluloid::IO::TCPServer","Celluloid/IO/TCPServer.html#method-c-from_ruby_server","(ruby_server)","<p>Convert a Ruby TCPServer into a Celluloid::IO::TCPServer\n"],["from_ruby_socket","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-c-from_ruby_socket","(ruby_socket)","<p>Convert a Ruby TCPSocket into a Celluloid::IO::TCPSocket DEPRECATED: to be\nremoved in a future release …\n"],["from_ruby_socket","Celluloid::IO::UNIXSocket","Celluloid/IO/UNIXSocket.html#method-c-from_ruby_socket","(ruby_socket)","<p>Convert a Ruby UNIXSocket into a Celluloid::IO::UNIXSocket DEPRECATED: to\nbe removed in a future release …\n"],["generate_id","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-c-generate_id","()",""],["getc","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-getc","()","<p>Reads one character from the stream.  Returns nil if called at end of file.\n"],["gets","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-gets","(eol=$/, limit=nil)","<p>Reads the next “line+ from the stream.  Lines are separated by\n<code>eol</code>.  If <code>limit</code> is provided the result …\n"],["included","Celluloid::IO","Celluloid/IO.html#method-c-included","(klass)",""],["nameservers","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-c-nameservers","()",""],["new","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-c-new","()",""],["new","Celluloid::IO::Mailbox","Celluloid/IO/Mailbox.html#method-c-new","()",""],["new","Celluloid::IO::Reactor","Celluloid/IO/Reactor.html#method-c-new","()",""],["new","Celluloid::IO::SSLServer","Celluloid/IO/SSLServer.html#method-c-new","(server, ctx)",""],["new","Celluloid::IO::SSLSocket","Celluloid/IO/SSLSocket.html#method-c-new","(io, ctx = OpenSSL::SSL::SSLContext.new)",""],["new","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-c-new","()",""],["new","Celluloid::IO::Stream::Latch","Celluloid/IO/Stream/Latch.html#method-c-new","()",""],["new","Celluloid::IO::TCPServer","Celluloid/IO/TCPServer.html#method-c-new","(hostname_or_port, port = nil)",""],["new","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-c-new","(remote_host, remote_port = nil, local_host = nil, local_port = nil)","<p>Opens a TCP connection to remote_host on remote_port. If local_host and\nlocal_port are specified, then …\n"],["new","Celluloid::IO::UDPSocket","Celluloid/IO/UDPSocket.html#method-c-new","(address_family = ::Socket::AF_INET)",""],["new","Celluloid::IO::UNIXServer","Celluloid/IO/UNIXServer.html#method-c-new","(socket_path)",""],["new","Celluloid::IO::UNIXSocket","Celluloid/IO/UNIXSocket.html#method-c-new","(socket_path, &block)","<p>Open a UNIX connection.\n"],["open","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-c-open","(*args, &block)","<p>Open a TCP socket, yielding it to the given block and closing it\nautomatically when done (if a block …\n"],["open","Celluloid::IO::UNIXServer","Celluloid/IO/UNIXServer.html#method-c-open","(socket_path)",""],["open","Celluloid::IO::UNIXSocket","Celluloid/IO/UNIXSocket.html#method-c-open","(socket_path, &block)","<p>Open a UNIX connection.\n"],["print","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-print","(*args)","<p>Writes <code>args</code> to the stream.\n<p>See IO#print for full details.\n"],["printf","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-printf","(s, *args)","<p>Formats and writes to the stream converting parameters under control of the\nformat string.\n<p>See Kernel#sprintf …\n"],["puts","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-puts","(*args)","<p>Writes <code>args</code> to the stream along with a record separator.\n<p>See IO#puts for full details.\n"],["read","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-read","(size=nil, buf=nil)","<p>Reads <code>size</code> bytes from the stream.  If <code>buf</code> is\nprovided it must reference a string which will receive the …\n"],["readchar","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-readchar","()","<p>Reads a one-character string from the stream.  Raises an EOFError at end of\nfile.\n"],["readline","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-readline","(eol=$/)","<p>Reads a line from the stream which is separated by <code>eol</code>.\n<p>Raises EOFError if at end of file.\n"],["readlines","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-readlines","(eol=$/)","<p>Reads lines from the stream which are separated by <code>eol</code>.\n<p>See also #gets\n"],["readpartial","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-readpartial","(maxlen, buf=nil)","<p>Reads at most <code>maxlen</code> bytes from the stream.  If\n<code>buf</code> is provided it must reference a string which will …\n"],["recv","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-i-recv","(maxlen, flags = nil)","<p>Receives a message\n"],["recvfrom","Celluloid::IO::UDPSocket","Celluloid/IO/UDPSocket.html#method-i-recvfrom","(maxlen, flags = nil)","<p>Receives up to maxlen bytes from socket. flags is zero or more of the MSG_\noptions. The first element …\n"],["resolv","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-resolv","()",""],["resolve","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-resolve","(hostname)",""],["resolve_host","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-resolve_host","(host)",""],["resolve_hostname","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-resolve_hostname","(hostname)",""],["resolve_ip","Celluloid::IO::DNSResolver","Celluloid/IO/DNSResolver.html#method-i-resolve_ip","(klass, host)",""],["run_once","Celluloid::IO::Reactor","Celluloid/IO/Reactor.html#method-i-run_once","(timeout = nil)","<p>Run the reactor, waiting for events or wakeup signal\n"],["send","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-i-send","(msg, flags, dest_sockaddr = nil)","<p>Send a message\n"],["synchronize","Celluloid::IO::Stream::Latch","Celluloid/IO/Stream/Latch.html#method-i-synchronize","()","<p>Synchronize an operation across all tasks in the current actor\n"],["sysread","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-sysread","(length = nil, buffer = nil)","<p>System read via the nonblocking subsystem\n"],["syswrite","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-syswrite","(string)","<p>System write via the nonblocking subsystem\n"],["to_io","Celluloid::IO::SSLSocket","Celluloid/IO/SSLSocket.html#method-i-to_io","()",""],["to_io","Celluloid::IO::TCPServer","Celluloid/IO/TCPServer.html#method-i-to_io","()",""],["to_io","Celluloid::IO::TCPSocket","Celluloid/IO/TCPSocket.html#method-i-to_io","()",""],["to_io","Celluloid::IO::UDPSocket","Celluloid/IO/UDPSocket.html#method-i-to_io","()",""],["to_io","Celluloid::IO::UNIXServer","Celluloid/IO/UNIXServer.html#method-i-to_io","()",""],["to_io","Celluloid::IO::UNIXSocket","Celluloid/IO/UNIXSocket.html#method-i-to_io","()",""],["try_convert","Celluloid::IO","Celluloid/IO.html#method-c-try_convert","(src)",""],["ungetc","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-ungetc","(c)","<p>Pushes character <code>c</code> back onto the stream such that a subsequent\nbuffered character read will return it. …\n"],["wait","Celluloid::IO::Reactor","Celluloid/IO/Reactor.html#method-i-wait","(io, set)","<p>Wait for the given IO operation to complete\n"],["wait_readable","Celluloid::IO","Celluloid/IO.html#method-i-wait_readable","(io)",""],["wait_readable","Celluloid::IO","Celluloid/IO.html#method-c-wait_readable","(io)",""],["wait_readable","Celluloid::IO::Reactor","Celluloid/IO/Reactor.html#method-i-wait_readable","(io)","<p>Wait for the given IO object to become readable\n"],["wait_readable","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-wait_readable","()","<p>Wait until the current object is readable\n"],["wait_readable","Celluloid::IO::UDPSocket","Celluloid/IO/UDPSocket.html#method-i-wait_readable","()","<p>Wait until the socket is readable\n"],["wait_writable","Celluloid::IO","Celluloid/IO.html#method-c-wait_writable","(io)",""],["wait_writable","Celluloid::IO","Celluloid/IO.html#method-i-wait_writable","(io)",""],["wait_writable","Celluloid::IO::Reactor","Celluloid/IO/Reactor.html#method-i-wait_writable","(io)","<p>Wait for the given IO object to become writable\n"],["wait_writable","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-wait_writable","()","<p>Wait until the current object is writable\n"],["write","Celluloid::IO::Stream","Celluloid/IO/Stream.html#method-i-write","(s)","<p>Writes <code>s</code> to the stream.  If the argument is not a string it\nwill be converted using String#to_s.  Returns …\n"]]}}