var search_data = {"index":{"searchIndex":["compositereadio","multipartpost","multipartable","net","http","post","multipart","put","multipart","parts","epiloguepart","filepart","parampart","part","uploadio","advance_io()","build_head()","build_part()","convert!()","current_io()","length()","method_missing()","new()","new()","new()","new()","new()","new()","read()","respond_to?()","rewind()"],"longSearchIndex":["compositereadio","multipartpost","multipartable","net","net::http","net::http::post","net::http::post::multipart","net::http::put","net::http::put::multipart","parts","parts::epiloguepart","parts::filepart","parts::parampart","parts::part","uploadio","compositereadio#advance_io()","parts::filepart#build_head()","parts::parampart#build_part()","uploadio::convert!()","compositereadio#current_io()","parts::parampart#length()","uploadio#method_missing()","compositereadio::new()","multipartable::new()","parts::epiloguepart::new()","parts::filepart::new()","parts::parampart::new()","uploadio::new()","compositereadio#read()","uploadio#respond_to?()","compositereadio#rewind()"],"info":[["CompositeReadIO","","CompositeReadIO.html","","<p>Concatenate together multiple IO objects into a single, composite IO object\nfor purposes of reading as …\n"],["MultipartPost","","MultipartPost.html","",""],["Multipartable","","Multipartable.html","",""],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["Net::HTTP::Post","","Net/HTTP/Post.html","",""],["Net::HTTP::Post::Multipart","","Net/HTTP/Post/Multipart.html","",""],["Net::HTTP::Put","","Net/HTTP/Put.html","",""],["Net::HTTP::Put::Multipart","","Net/HTTP/Put/Multipart.html","",""],["Parts","","Parts.html","",""],["Parts::EpiloguePart","","Parts/EpiloguePart.html","","<p>Represents the epilogue or closing boundary.\n"],["Parts::FilePart","","Parts/FilePart.html","","<p>Represents a part to be filled from file IO.\n"],["Parts::ParamPart","","Parts/ParamPart.html","",""],["Parts::Part","","Parts/Part.html","",""],["UploadIO","","UploadIO.html","","<p>Convenience methods for dealing with files and IO that are to be uploaded.\n"],["advance_io","CompositeReadIO","CompositeReadIO.html#method-i-advance_io","()",""],["build_head","Parts::FilePart","Parts/FilePart.html#method-i-build_head","(boundary, name, filename, type, content_len, opts = {}, headers = {})",""],["build_part","Parts::ParamPart","Parts/ParamPart.html#method-i-build_part","(boundary, name, value, headers = {})",""],["convert!","UploadIO","UploadIO.html#method-c-convert-21","(io, content_type, original_filename, local_path)",""],["current_io","CompositeReadIO","CompositeReadIO.html#method-i-current_io","()",""],["length","Parts::ParamPart","Parts/ParamPart.html#method-i-length","()",""],["method_missing","UploadIO","UploadIO.html#method-i-method_missing","(*args)",""],["new","CompositeReadIO","CompositeReadIO.html#method-c-new","(*ios)","<p>Create a new composite-read IO from the arguments, all of which should\nrespond to #read in a manner consistent …\n"],["new","Multipartable","Multipartable.html#method-c-new","(path, params, headers={}, boundary = DEFAULT_BOUNDARY)",""],["new","Parts::EpiloguePart","Parts/EpiloguePart.html#method-c-new","(boundary)",""],["new","Parts::FilePart","Parts/FilePart.html#method-c-new","(boundary, name, io, headers = {})",""],["new","Parts::ParamPart","Parts/ParamPart.html#method-c-new","(boundary, name, value, headers = {})",""],["new","UploadIO","UploadIO.html#method-c-new","(filename_or_io, content_type, filename = nil, opts = {})",""],["read","CompositeReadIO","CompositeReadIO.html#method-i-read","(length = nil, outbuf = nil)","<p>Read from IOs in order until `length` bytes have been received.\n"],["respond_to?","UploadIO","UploadIO.html#method-i-respond_to-3F","(meth, include_all = false)",""],["rewind","CompositeReadIO","CompositeReadIO.html#method-i-rewind","()",""]]}}