var search_data = {"index":{"searchIndex":["classifierreborn","bayes","categorynamer","contentnode","hasher","lsi","summarizer","wordlist","gsl","matrix","vector","matrix","<<()","sv_decomp()","[]()","[]=()","_dump()","_load()","add_category()","add_item()","add_word()","append_category()","build_index()","build_reduced_matrix()","categories_for()","classifications()","classify()","classify()","clean_word_hash()","diag()","find_related()","highest_ranked_stems()","highest_relative_content()","items()","make_word_list()","method_missing()","needs_rebuild?()","new()","new()","new()","new()","node_for_content()","paragraph_summary()","perform_lsi()","prepare_name()","proximity_array_for_content()","proximity_norms_for_content()","raw_vector_with()","remove_item()","search()","search_norm()","search_vector()","size()","split_paragraphs()","split_sentences()","summary()","train()","untrain()","without_punctuation()","word_for_index()","word_hash()","word_hash_for_symbols()","word_hash_for_words()","license","readme.markdown"],"longSearchIndex":["classifierreborn","classifierreborn::bayes","classifierreborn::categorynamer","classifierreborn::contentnode","classifierreborn::hasher","classifierreborn::lsi","classifierreborn::summarizer","classifierreborn::wordlist","gsl","gsl::matrix","gsl::vector","matrix","classifierreborn::lsi#<<()","matrix#sv_decomp()","classifierreborn::wordlist#[]()","matrix#[]=()","gsl::vector#_dump()","gsl::vector::_load()","classifierreborn::bayes#add_category()","classifierreborn::lsi#add_item()","classifierreborn::wordlist#add_word()","classifierreborn::bayes#append_category()","classifierreborn::lsi#build_index()","classifierreborn::lsi#build_reduced_matrix()","classifierreborn::lsi#categories_for()","classifierreborn::bayes#classifications()","classifierreborn::bayes#classify()","classifierreborn::lsi#classify()","classifierreborn::hasher#clean_word_hash()","matrix::diag()","classifierreborn::lsi#find_related()","classifierreborn::lsi#highest_ranked_stems()","classifierreborn::lsi#highest_relative_content()","classifierreborn::lsi#items()","classifierreborn::lsi#make_word_list()","classifierreborn::bayes#method_missing()","classifierreborn::lsi#needs_rebuild?()","classifierreborn::bayes::new()","classifierreborn::contentnode::new()","classifierreborn::lsi::new()","classifierreborn::wordlist::new()","classifierreborn::lsi#node_for_content()","classifierreborn::summarizer#paragraph_summary()","classifierreborn::summarizer#perform_lsi()","classifierreborn::categorynamer#prepare_name()","classifierreborn::lsi#proximity_array_for_content()","classifierreborn::lsi#proximity_norms_for_content()","classifierreborn::contentnode#raw_vector_with()","classifierreborn::lsi#remove_item()","classifierreborn::lsi#search()","classifierreborn::contentnode#search_norm()","classifierreborn::contentnode#search_vector()","classifierreborn::wordlist#size()","classifierreborn::summarizer#split_paragraphs()","classifierreborn::summarizer#split_sentences()","classifierreborn::summarizer#summary()","classifierreborn::bayes#train()","classifierreborn::bayes#untrain()","classifierreborn::hasher#without_punctuation()","classifierreborn::wordlist#word_for_index()","classifierreborn::hasher#word_hash()","classifierreborn::hasher#word_hash_for_symbols()","classifierreborn::hasher#word_hash_for_words()","",""],"info":[["ClassifierReborn","","ClassifierReborn.html","","<p>Author &mdash; David Fayram  (dfayram@lensmen.net)\n<p>Copyright &mdash; Copyright © 2005 David Fayram II\n<p>License &mdash; LGPL\n"],["ClassifierReborn::Bayes","","ClassifierReborn/Bayes.html","",""],["ClassifierReborn::CategoryNamer","","ClassifierReborn/CategoryNamer.html","",""],["ClassifierReborn::ContentNode","","ClassifierReborn/ContentNode.html","","<p>This is an internal data structure class for the LSI node. Save for\nraw_vector_with, it should be fairly …\n"],["ClassifierReborn::Hasher","","ClassifierReborn/Hasher.html","",""],["ClassifierReborn::LSI","","ClassifierReborn/LSI.html","","<p>This class implements a Latent Semantic Indexer, which can search, classify\nand cluster data based on …\n"],["ClassifierReborn::Summarizer","","ClassifierReborn/Summarizer.html","",""],["ClassifierReborn::WordList","","ClassifierReborn/WordList.html","","<p>This class keeps a word =&gt; index mapping. It is used to map stemmed\nwords to dimensions of a vector. …\n"],["GSL","","GSL.html","",""],["GSL::Matrix","","GSL/Matrix.html","",""],["GSL::Vector","","GSL/Vector.html","",""],["Matrix","","Matrix.html","",""],["<<","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-3C-3C","( item )","<p>A less flexible shorthand for add_item that assumes you are passing in a\nstring with no categorries. …\n"],["SV_decomp","Matrix","Matrix.html#method-i-SV_decomp","(maxSweeps = 20)",""],["[]","ClassifierReborn::WordList","ClassifierReborn/WordList.html#method-i-5B-5D","(lookup)","<p>Returns the dimension of the word or nil if the word is not in the space.\n"],["[]=","Matrix","Matrix.html#method-i-5B-5D-3D","(i,j,val)",""],["_dump","GSL::Vector","GSL/Vector.html#method-i-_dump","(v)",""],["_load","GSL::Vector","GSL/Vector.html#method-c-_load","(arr)",""],["add_category","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-add_category","(category)","<p>Allows you to add categories to the classifier. For example:\n\n<pre>b.add_category &quot;Not spam&quot;</pre>\n<p>WARNING: Adding …\n"],["add_item","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-add_item","( item, *categories, &block )","<p>Adds an item to the index. item is assumed to be a string, but any item may\nbe indexed so long as it …\n"],["add_word","ClassifierReborn::WordList","ClassifierReborn/WordList.html#method-i-add_word","(word)","<p>Adds a word (if it is new) and assigns it a unique dimension.\n"],["append_category","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-append_category","(category)",""],["build_index","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-build_index","( cutoff=0.75 )","<p>This function rebuilds the index if needs_rebuild? returns true. For very\nlarge document spaces, this …\n"],["build_reduced_matrix","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-build_reduced_matrix","( matrix, cutoff=0.75 )",""],["categories_for","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-categories_for","(item)","<p>Returns the categories for a given indexed items. You are free to add and\nremove items from this as you …\n"],["classifications","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-classifications","(text)","<p>Returns the scores in each category the provided <code>text</code>. E.g.,\n\n<pre>b.classifications &quot;I hate bad words and you&quot; ...</pre>\n"],["classify","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-classify","(text)","<p>Returns the classification of the provided <code>text</code>, which is one\nof the categories given in the initializer. …\n"],["classify","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-classify","( doc, cutoff=0.30, &block )","<p>This function uses a voting system to categorize documents, based on the\ncategories of other documents. …\n"],["clean_word_hash","ClassifierReborn::Hasher","ClassifierReborn/Hasher.html#method-i-clean_word_hash","(str)","<p>Return a word hash without extra punctuation or short symbols, just stemmed\nwords\n"],["diag","Matrix","Matrix.html#method-c-diag","(s)",""],["find_related","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-find_related","( doc, max_nearest=3, &block )","<p>This function takes content and finds other documents that are semantically\n“close”, returning …\n"],["highest_ranked_stems","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-highest_ranked_stems","( doc, count=3 )","<p>Prototype, only works on indexed documents. I have no clue if this is going\nto work, but in theory it&#39;s …\n"],["highest_relative_content","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-highest_relative_content","( max_chunks=10 )","<p>This method returns max_chunks entries, ordered by their average semantic\nrating. Essentially, the average …\n"],["items","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-items","()","<p>Returns an array of items that are indexed.\n"],["make_word_list","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-make_word_list","()",""],["method_missing","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-method_missing","(name, *args)","<p>Provides training and untraining methods for the categories specified in\nBayes#new For example:\n\n<pre>b = ClassifierReborn::Bayes.new ...</pre>\n"],["needs_rebuild?","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-needs_rebuild-3F","()","<p>Returns true if the index needs to be rebuilt.  The index needs to be built\nafter all informaton is added, …\n"],["new","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-c-new","(*categories)","<p>The class can be created with one or more categories, each of which will be\ninitialized and given a training …\n"],["new","ClassifierReborn::ContentNode","ClassifierReborn/ContentNode.html#method-c-new","( word_hash, *categories )","<p>If text_proc is not specified, the source will be duck-typed via\nsource.to_s\n"],["new","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-c-new","(options = {})","<p>Create a fresh index. If you want to call #build_index manually, use\n\n<pre>ClassifierReborn::LSI.new :auto_rebuild ...</pre>\n"],["new","ClassifierReborn::WordList","ClassifierReborn/WordList.html#method-c-new","()",""],["node_for_content","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-node_for_content","(item, &block)",""],["paragraph_summary","ClassifierReborn::Summarizer","ClassifierReborn/Summarizer.html#method-i-paragraph_summary","( str, count=1, separator=\" [...] \" )",""],["perform_lsi","ClassifierReborn::Summarizer","ClassifierReborn/Summarizer.html#method-i-perform_lsi","(chunks, count, separator)",""],["prepare_name","ClassifierReborn::CategoryNamer","ClassifierReborn/CategoryNamer.html#method-i-prepare_name","(name)",""],["proximity_array_for_content","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-proximity_array_for_content","( doc, &block )","<p>This function is the primitive that find_related and classify build upon.\nIt returns an array of 2-element …\n"],["proximity_norms_for_content","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-proximity_norms_for_content","( doc, &block )","<p>Similar to proximity_array_for_content, this function takes similar\narguments and returns a similar array. …\n"],["raw_vector_with","ClassifierReborn::ContentNode","ClassifierReborn/ContentNode.html#method-i-raw_vector_with","( word_list )","<p>Creates the raw vector out of word_hash using word_list as the key for\nmapping the vector space.\n"],["remove_item","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-remove_item","( item )","<p>Removes an item from the database, if it is indexed.\n"],["search","ClassifierReborn::LSI","ClassifierReborn/LSI.html#method-i-search","( string, max_nearest=3 )","<p>This function allows for text-based search of your index. Unlike other\nfunctions like find_related and …\n"],["search_norm","ClassifierReborn::ContentNode","ClassifierReborn/ContentNode.html#method-i-search_norm","()","<p>Use this to fetch the appropriate search vector in normalized form.\n"],["search_vector","ClassifierReborn::ContentNode","ClassifierReborn/ContentNode.html#method-i-search_vector","()","<p>Use this to fetch the appropriate search vector.\n"],["size","ClassifierReborn::WordList","ClassifierReborn/WordList.html#method-i-size","()","<p>Returns the number of words mapped.\n"],["split_paragraphs","ClassifierReborn::Summarizer","ClassifierReborn/Summarizer.html#method-i-split_paragraphs","(str)",""],["split_sentences","ClassifierReborn::Summarizer","ClassifierReborn/Summarizer.html#method-i-split_sentences","(str)",""],["summary","ClassifierReborn::Summarizer","ClassifierReborn/Summarizer.html#method-i-summary","( str, count=10, separator=\" [...] \" )",""],["train","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-train","(category, text)","<p>Provides a general training method for all categories specified in\nBayes#new For example:\n\n<pre>b = ClassifierReborn::Bayes.new ...</pre>\n"],["untrain","ClassifierReborn::Bayes","ClassifierReborn/Bayes.html#method-i-untrain","(category, text)","<p>Provides a untraining method for all categories specified in Bayes#new Be\nvery careful with this method. …\n"],["without_punctuation","ClassifierReborn::Hasher","ClassifierReborn/Hasher.html#method-i-without_punctuation","(str)","<p>Removes common punctuation symbols, returning a new string. E.g.,\n\n<pre>&quot;Hello (greeting&#39;s), with {braces} &lt; ...</pre>\n"],["word_for_index","ClassifierReborn::WordList","ClassifierReborn/WordList.html#method-i-word_for_index","(ind)",""],["word_hash","ClassifierReborn::Hasher","ClassifierReborn/Hasher.html#method-i-word_hash","(str)","<p>Return a Hash of strings =&gt; ints. Each word in the string is stemmed,\ninterned, and indexes to its …\n"],["word_hash_for_symbols","ClassifierReborn::Hasher","ClassifierReborn/Hasher.html#method-i-word_hash_for_symbols","(words)",""],["word_hash_for_words","ClassifierReborn::Hasher","ClassifierReborn/Hasher.html#method-i-word_hash_for_words","(words)",""],["LICENSE","","LICENSE.html","","\n<pre>                 GNU LESSER GENERAL PUBLIC LICENSE\n                      Version 2.1, February 1999\n ...</pre>\n"],["README.markdown","","README_markdown.html","","<p>Welcome to Classifier Reborn\n<p>Classifier is a general module to allow Bayesian and other types of\nclassifications. …\n"]]}}