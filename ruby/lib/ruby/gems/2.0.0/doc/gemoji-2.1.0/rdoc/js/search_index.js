var search_data = {"index":{"searchIndex":["emoji","character","add_alias()","add_tag()","add_unicode_alias()","all()","create()","custom?()","data_file()","edit_emoji()","find_by_alias()","find_by_unicode()","hex_inspect()","hex_inspect()","image_filename()","images_path()","inspect()","name()","names_index()","new()","parse_data_file()","raw()","unicodes_index()","emoji.rake"],"longSearchIndex":["emoji","emoji::character","emoji::character#add_alias()","emoji::character#add_tag()","emoji::character#add_unicode_alias()","emoji#all()","emoji#create()","emoji::character#custom?()","emoji#data_file()","emoji#edit_emoji()","emoji#find_by_alias()","emoji#find_by_unicode()","emoji::character#hex_inspect()","emoji::character::hex_inspect()","emoji::character#image_filename()","emoji#images_path()","emoji::character#inspect()","emoji::character#name()","emoji#names_index()","emoji::character::new()","emoji#parse_data_file()","emoji::character#raw()","emoji#unicodes_index()",""],"info":[["Emoji","","Emoji.html","",""],["Emoji::Character","","Emoji/Character.html","",""],["add_alias","Emoji::Character","Emoji/Character.html#method-i-add_alias","(name)",""],["add_tag","Emoji::Character","Emoji/Character.html#method-i-add_tag","(tag)",""],["add_unicode_alias","Emoji::Character","Emoji/Character.html#method-i-add_unicode_alias","(str)",""],["all","Emoji","Emoji.html#method-i-all","()",""],["create","Emoji","Emoji.html#method-i-create","(name)","<p>Public: Initialize an Emoji::Character instance and yield it to the block.\nThe character is added to …\n"],["custom?","Emoji::Character","Emoji/Character.html#method-i-custom-3F","()","<p>True if the emoji is not a standard Emoji character.\n"],["data_file","Emoji","Emoji.html#method-i-data_file","()",""],["edit_emoji","Emoji","Emoji.html#method-i-edit_emoji","(emoji)","<p>Public: Yield an emoji to the block and update the indices in case its\naliases or unicode_aliases lists …\n"],["find_by_alias","Emoji","Emoji.html#method-i-find_by_alias","(name)","<p>Public: Find an emoji by its aliased name. Return nil if missing.\n"],["find_by_unicode","Emoji","Emoji.html#method-i-find_by_unicode","(unicode)","<p>Public: Find an emoji by its unicode character. Return nil if missing.\n"],["hex_inspect","Emoji::Character","Emoji/Character.html#method-i-hex_inspect","()",""],["hex_inspect","Emoji::Character","Emoji/Character.html#method-c-hex_inspect","(str)","<p>Inspect individual Unicode characters in a string by dumping its codepoints\nin hexadecimal format.\n"],["image_filename","Emoji::Character","Emoji/Character.html#method-i-image_filename","()",""],["images_path","Emoji","Emoji.html#method-i-images_path","()",""],["inspect","Emoji::Character","Emoji/Character.html#method-i-inspect","()",""],["name","Emoji::Character","Emoji/Character.html#method-i-name","()",""],["names_index","Emoji","Emoji.html#method-i-names_index","()",""],["new","Emoji::Character","Emoji/Character.html#method-c-new","(name)",""],["parse_data_file","Emoji","Emoji.html#method-i-parse_data_file","()",""],["raw","Emoji::Character","Emoji/Character.html#method-i-raw","()","<p>Raw Unicode string for an emoji. Nil if emoji is non-standard.\n"],["unicodes_index","Emoji","Emoji.html#method-i-unicodes_index","()",""],["emoji.rake","","lib/tasks/emoji_rake.html","","<p>desc “Copy emoji to the Rails `public/images/emoji` directory” task :emoji\ndo\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;emoji&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}